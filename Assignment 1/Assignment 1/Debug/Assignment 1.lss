
Assignment 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006be  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dc  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cc  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000330  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000086  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001576  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 
#include "problem2.h"

int main(void)
{
problem2();
  6c:	0e 94 3b 00 	call	0x76	; 0x76 <problem2>
}
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <problem2>:
 *  Author: The7ag
 */ 
#include "problem2.h"
void problem2()
{
	for (char i=0;i<8;i++)
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	0c c0       	rjmp	.+24     	; 0x92 <problem2+0x1c>
	{
		SetBit(DDRA,i);
  7a:	3a b3       	in	r19, 0x1a	; 26
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	02 2e       	mov	r0, r18
  82:	02 c0       	rjmp	.+4      	; 0x88 <problem2+0x12>
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	0a 94       	dec	r0
  8a:	e2 f7       	brpl	.-8      	; 0x84 <problem2+0xe>
  8c:	83 2b       	or	r24, r19
  8e:	8a bb       	out	0x1a, r24	; 26
 *  Author: The7ag
 */ 
#include "problem2.h"
void problem2()
{
	for (char i=0;i<8;i++)
  90:	2f 5f       	subi	r18, 0xFF	; 255
  92:	28 30       	cpi	r18, 0x08	; 8
  94:	90 f3       	brcs	.-28     	; 0x7a <problem2+0x4>
	{
		SetBit(DDRA,i);
	}
	while(1)
	{
		for (char i=0;i<8;i++)
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	33 c0       	rjmp	.+102    	; 0x100 <problem2+0x8a>
		{
			SetBit(PORTA,i);
  9a:	3b b3       	in	r19, 0x1b	; 27
  9c:	62 2f       	mov	r22, r18
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	ac 01       	movw	r20, r24
  a6:	02 2e       	mov	r0, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <problem2+0x38>
  aa:	44 0f       	add	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <problem2+0x34>
  b2:	43 2b       	or	r20, r19
  b4:	4b bb       	out	0x1b, r20	; 27
			SetBit(PORTA,i-1);
  b6:	3b b3       	in	r19, 0x1b	; 27
  b8:	ab 01       	movw	r20, r22
  ba:	41 50       	subi	r20, 0x01	; 1
  bc:	51 09       	sbc	r21, r1
  be:	fc 01       	movw	r30, r24
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <problem2+0x50>
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	4a 95       	dec	r20
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <problem2+0x4c>
  ca:	af 01       	movw	r20, r30
  cc:	3e 2b       	or	r19, r30
  ce:	3b bb       	out	0x1b, r19	; 27
			SetBit(PORTA,i+1);
  d0:	3b b3       	in	r19, 0x1b	; 27
  d2:	6f 5f       	subi	r22, 0xFF	; 255
  d4:	7f 4f       	sbci	r23, 0xFF	; 255
  d6:	02 c0       	rjmp	.+4      	; 0xdc <problem2+0x66>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <problem2+0x62>
  e0:	83 2b       	or	r24, r19
  e2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	ff ef       	ldi	r31, 0xFF	; 255
  e6:	39 e6       	ldi	r19, 0x69	; 105
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	f1 50       	subi	r31, 0x01	; 1
  ec:	30 40       	sbci	r19, 0x00	; 0
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <problem2+0x74>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <problem2+0x7e>
  f4:	00 00       	nop
			_delay_ms(1000);
			ClearBit(PORTA,i-1);
  f6:	8b b3       	in	r24, 0x1b	; 27
  f8:	40 95       	com	r20
  fa:	48 23       	and	r20, r24
  fc:	4b bb       	out	0x1b, r20	; 27
	{
		SetBit(DDRA,i);
	}
	while(1)
	{
		for (char i=0;i<8;i++)
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	28 30       	cpi	r18, 0x08	; 8
 102:	58 f2       	brcs	.-106    	; 0x9a <problem2+0x24>
			SetBit(PORTA,i-1);
			SetBit(PORTA,i+1);
			_delay_ms(1000);
			ClearBit(PORTA,i-1);
		}
		ClearBit(PORTA,7);
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	8b bb       	out	0x1b, r24	; 27
	}
 10a:	c5 cf       	rjmp	.-118    	; 0x96 <problem2+0x20>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
