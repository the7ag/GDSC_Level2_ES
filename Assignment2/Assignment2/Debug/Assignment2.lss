
Assignment2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c9  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e0  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d0  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "Problem2.h"

int main(void)
{
problem2();
  6c:	0e 94 3b 00 	call	0x76	; 0x76 <problem2>
}
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <problem2>:
 *  Author: The7ag
 */ 
#include "Problem2.h"
void problem2()
{
	ClearBit(DDRA,0);
  76:	8a b3       	in	r24, 0x1a	; 26
  78:	8e 7f       	andi	r24, 0xFE	; 254
  7a:	8a bb       	out	0x1a, r24	; 26
	ClearBit(DDRA,1);
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	8d 7f       	andi	r24, 0xFD	; 253
  80:	8a bb       	out	0x1a, r24	; 26
	SetBit(DDRA,5);
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	80 62       	ori	r24, 0x20	; 32
  86:	8a bb       	out	0x1a, r24	; 26
	SetBit(PORTA,5);
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	80 62       	ori	r24, 0x20	; 32
  8c:	8b bb       	out	0x1b, r24	; 27
	SetBit(DDRA,6);
  8e:	8a b3       	in	r24, 0x1a	; 26
  90:	80 64       	ori	r24, 0x40	; 64
  92:	8a bb       	out	0x1a, r24	; 26
	SetBit(PORTA,6);
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	80 64       	ori	r24, 0x40	; 64
  98:	8b bb       	out	0x1b, r24	; 27
	int count=0;
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	c9 01       	movw	r24, r18
	while(1)
	{
		if (ReadBit(PINA,0)==1)
  a0:	c8 9b       	sbis	0x19, 0	; 25
  a2:	16 c0       	rjmp	.+44     	; 0xd0 <problem2+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f e7       	ldi	r18, 0x7F	; 127
  a6:	3b e8       	ldi	r19, 0x8B	; 139
  a8:	48 e0       	ldi	r20, 0x08	; 8
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	40 40       	sbci	r20, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <problem2+0x34>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <problem2+0x3e>
  b4:	00 00       	nop
		{
			_delay_ms(350);
			count++;
  b6:	01 96       	adiw	r24, 0x01	; 1
			if (count>9)
  b8:	8a 30       	cpi	r24, 0x0A	; 10
  ba:	91 05       	cpc	r25, r1
  bc:	3c f4       	brge	.+14     	; 0xcc <problem2+0x56>
			{
				count=9;
			}else
			{
			ClearBit(PORTA,5);
  be:	2b b3       	in	r18, 0x1b	; 27
  c0:	2f 7d       	andi	r18, 0xDF	; 223
  c2:	2b bb       	out	0x1b, r18	; 27
			SetBit(PORTA,5);	
  c4:	2b b3       	in	r18, 0x1b	; 27
  c6:	20 62       	ori	r18, 0x20	; 32
  c8:	2b bb       	out	0x1b, r18	; 27
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <problem2+0x5a>
		{
			_delay_ms(350);
			count++;
			if (count>9)
			{
				count=9;
  cc:	89 e0       	ldi	r24, 0x09	; 9
  ce:	90 e0       	ldi	r25, 0x00	; 0
			{
			ClearBit(PORTA,5);
			SetBit(PORTA,5);	
			}
		}
		if (ReadBit(PINA,1)==1)
  d0:	c9 9b       	sbis	0x19, 1	; 25
  d2:	e6 cf       	rjmp	.-52     	; 0xa0 <problem2+0x2a>
  d4:	2f e7       	ldi	r18, 0x7F	; 127
  d6:	3b e8       	ldi	r19, 0x8B	; 139
  d8:	48 e0       	ldi	r20, 0x08	; 8
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	30 40       	sbci	r19, 0x00	; 0
  de:	40 40       	sbci	r20, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <problem2+0x64>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <problem2+0x6e>
  e4:	00 00       	nop
		{
			_delay_ms(350);
			count--;
  e6:	9c 01       	movw	r18, r24
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	31 09       	sbc	r19, r1
			if (count<0)
			{
				count=0;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (ReadBit(PINA,1)==1)
		{
			_delay_ms(350);
			count--;
			if (count<0)
  f0:	ba f2       	brmi	.-82     	; 0xa0 <problem2+0x2a>
			{
				count=0;
			}else
			{
			ClearBit(PORTA,6);
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	8f 7b       	andi	r24, 0xBF	; 191
  f6:	8b bb       	out	0x1b, r24	; 27
			SetBit(PORTA,6);	
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	cf cf       	rjmp	.-98     	; 0x9e <problem2+0x28>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
