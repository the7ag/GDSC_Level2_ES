
Assignment3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000004a6  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001059  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000981  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a92  00000000  00000000  0000207e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00002b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f6  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bf7  00000000  00000000  0000328e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003e85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  7a:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LED_enuInit>:
#include "LED_config.h"

#include "../../MCAL/DIO/DIO.h"

ES_t LED_enuInit(LED_t * Copy_pstrLedConfig)
{
  82:	ef 92       	push	r14
  84:	ff 92       	push	r15
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pstrLedConfig != NULL)
  8c:	00 97       	sbiw	r24, 0x00	; 0
  8e:	b9 f5       	brne	.+110    	; 0xfe <LED_enuInit+0x7c>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	40 c0       	rjmp	.+128    	; 0x114 <LED_enuInit+0x92>
	if (Copy_pstrLedConfig != NULL)
	{
		u8 Local_enuIterator=0;
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8OUTPUT );
  94:	c1 2f       	mov	r28, r17
  96:	d0 e0       	ldi	r29, 0x00	; 0
  98:	cc 0f       	add	r28, r28
  9a:	dd 1f       	adc	r29, r29
  9c:	cc 0f       	add	r28, r28
  9e:	dd 1f       	adc	r29, r29
  a0:	ce 0d       	add	r28, r14
  a2:	df 1d       	adc	r29, r15
  a4:	69 81       	ldd	r22, Y+1	; 0x01
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	88 81       	ld	r24, Y
  aa:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_enuSetPinDirection>
			if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
  ae:	8a 81       	ldd	r24, Y+2	; 0x02
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	89 f4       	brne	.+34     	; 0xd6 <LED_enuInit+0x54>
			{
				if (Copy_pstrLedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
  b4:	8b 81       	ldd	r24, Y+3	; 0x03
  b6:	89 30       	cpi	r24, 0x09	; 9
  b8:	31 f4       	brne	.+12     	; 0xc6 <LED_enuInit+0x44>
				{
					Local_enuErrorState =DIO_enuSetPinValue(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
  ba:	69 81       	ldd	r22, Y+1	; 0x01
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	88 81       	ld	r24, Y
  c0:	0e 94 98 01 	call	0x330	; 0x330 <DIO_enuSetPinValue>
  c4:	1a c0       	rjmp	.+52     	; 0xfa <LED_enuInit+0x78>
				}
				else if(Copy_pstrLedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
  c6:	8b 37       	cpi	r24, 0x7B	; 123
  c8:	01 f5       	brne	.+64     	; 0x10a <LED_enuInit+0x88>
				{
					Local_enuErrorState =DIO_enuSetPinValue(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
  ca:	69 81       	ldd	r22, Y+1	; 0x01
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	88 81       	ld	r24, Y
  d0:	0e 94 98 01 	call	0x330	; 0x330 <DIO_enuSetPinValue>
  d4:	12 c0       	rjmp	.+36     	; 0xfa <LED_enuInit+0x78>
				else
				{
					return ES_OUT_OF_RANGE;
				}
			}
			else if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
  d6:	8d 30       	cpi	r24, 0x0D	; 13
  d8:	d1 f4       	brne	.+52     	; 0x10e <LED_enuInit+0x8c>
			{
				if (Copy_pstrLedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	89 30       	cpi	r24, 0x09	; 9
  de:	31 f4       	brne	.+12     	; 0xec <LED_enuInit+0x6a>
				{
					Local_enuErrorState =DIO_enuSetPinValue(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
  e0:	69 81       	ldd	r22, Y+1	; 0x01
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	88 81       	ld	r24, Y
  e6:	0e 94 98 01 	call	0x330	; 0x330 <DIO_enuSetPinValue>
  ea:	07 c0       	rjmp	.+14     	; 0xfa <LED_enuInit+0x78>
				}
				else if(Copy_pstrLedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
  ec:	8b 37       	cpi	r24, 0x7B	; 123
  ee:	89 f4       	brne	.+34     	; 0x112 <LED_enuInit+0x90>
				{
					Local_enuErrorState =DIO_enuSetPinValue(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
  f0:	69 81       	ldd	r22, Y+1	; 0x01
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	88 81       	ld	r24, Y
  f6:	0e 94 98 01 	call	0x330	; 0x330 <DIO_enuSetPinValue>
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pstrLedConfig != NULL)
	{
		u8 Local_enuIterator=0;
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
  fa:	1f 5f       	subi	r17, 0xFF	; 255
  fc:	03 c0       	rjmp	.+6      	; 0x104 <LED_enuInit+0x82>
  fe:	7c 01       	movw	r14, r24
 100:	10 e0       	ldi	r17, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	13 30       	cpi	r17, 0x03	; 3
 106:	30 f2       	brcs	.-116    	; 0x94 <LED_enuInit+0x12>
 108:	05 c0       	rjmp	.+10     	; 0x114 <LED_enuInit+0x92>
				{
					Local_enuErrorState =DIO_enuSetPinValue(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
				}
				else
				{
					return ES_OUT_OF_RANGE;
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	03 c0       	rjmp	.+6      	; 0x114 <LED_enuInit+0x92>
					return ES_OUT_OF_RANGE;
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	01 c0       	rjmp	.+2      	; 0x114 <LED_enuInit+0x92>
				{
					Local_enuErrorState =DIO_enuSetPinValue(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
				}
				else
				{
					return ES_OUT_OF_RANGE;
 112:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}

	return Local_enuErrorState;
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	08 95       	ret

00000120 <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * Copy_pstrLedID)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pstrLedID != NULL)
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	91 f0       	breq	.+36     	; 0x148 <LED_enuTurnON+0x28>
 124:	fc 01       	movw	r30, r24
	{
		if (Copy_pstrLedID->LED_u8Connection == LED_SINK )
 126:	82 81       	ldd	r24, Z+2	; 0x02
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	31 f4       	brne	.+12     	; 0x138 <LED_enuTurnON+0x18>
		{
			Local_enuErrorState=DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
 12c:	61 81       	ldd	r22, Z+1	; 0x01
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	0e 94 98 01 	call	0x330	; 0x330 <DIO_enuSetPinValue>
 136:	08 95       	ret
		}
		else if (Copy_pstrLedID->LED_u8Connection == LED_SOURCE)
 138:	8d 30       	cpi	r24, 0x0D	; 13
 13a:	41 f4       	brne	.+16     	; 0x14c <LED_enuTurnON+0x2c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
 13c:	61 81       	ldd	r22, Z+1	; 0x01
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	80 81       	ld	r24, Z
 142:	0e 94 98 01 	call	0x330	; 0x330 <DIO_enuSetPinValue>
 146:	08 95       	ret
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	08 95       	ret
		{
			Local_enuErrorState=DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 14c:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_enuErrorState=ES_NULL_POINTER;
	}

	return Local_enuErrorState;
}
 14e:	08 95       	ret

00000150 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * Copy_pstrLedID)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pstrLedID != NULL)
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	91 f0       	breq	.+36     	; 0x178 <LED_enuTurnOFF+0x28>
 154:	fc 01       	movw	r30, r24
	{
		if (Copy_pstrLedID->LED_u8Connection == LED_SINK )
 156:	82 81       	ldd	r24, Z+2	; 0x02
 158:	88 30       	cpi	r24, 0x08	; 8
 15a:	31 f4       	brne	.+12     	; 0x168 <LED_enuTurnOFF+0x18>
		{
			Local_enuErrorState=DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
 15c:	61 81       	ldd	r22, Z+1	; 0x01
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	80 81       	ld	r24, Z
 162:	0e 94 98 01 	call	0x330	; 0x330 <DIO_enuSetPinValue>
 166:	08 95       	ret
		}
		else if (Copy_pstrLedID->LED_u8Connection == LED_SOURCE)
 168:	8d 30       	cpi	r24, 0x0D	; 13
 16a:	41 f4       	brne	.+16     	; 0x17c <LED_enuTurnOFF+0x2c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
 16c:	61 81       	ldd	r22, Z+1	; 0x01
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	0e 94 98 01 	call	0x330	; 0x330 <DIO_enuSetPinValue>
 176:	08 95       	ret
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	08 95       	ret
		{
			Local_enuErrorState=DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 17c:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_enuErrorState=ES_NULL_POINTER;
	}

	return Local_enuErrorState;
}
 17e:	08 95       	ret

00000180 <Switch_enuInit>:
#include "Switch_config.h"

#include "../../MCAL/DIO/DIO.h"

ES_t Switch_enuInit(SW_t * Copy_AstrSwitchs)
{
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_AstrSwitchs != NULL)
 18a:	00 97       	sbiw	r24, 0x00	; 0
 18c:	b9 f4       	brne	.+46     	; 0x1bc <Switch_enuInit+0x3c>
			Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID ,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID,Copy_AstrSwitchs[Local_u8Iterator].SW_Status);
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	1a c0       	rjmp	.+52     	; 0x1c6 <Switch_enuInit+0x46>
	if (Copy_AstrSwitchs != NULL)
	{
		u8 Local_u8Iterator =0;
		for (Local_u8Iterator=0; Local_u8Iterator < SW_NUM ; Local_u8Iterator++)
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID ,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID, DIO_u8INPUT);
 192:	c1 2f       	mov	r28, r17
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	ce 01       	movw	r24, r28
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	c8 0f       	add	r28, r24
 19e:	d9 1f       	adc	r29, r25
 1a0:	ce 0d       	add	r28, r14
 1a2:	df 1d       	adc	r29, r15
 1a4:	69 81       	ldd	r22, Y+1	; 0x01
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	88 81       	ld	r24, Y
 1aa:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_enuSetPinDirection>
			Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID ,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID,Copy_AstrSwitchs[Local_u8Iterator].SW_Status);
 1ae:	4a 81       	ldd	r20, Y+2	; 0x02
 1b0:	69 81       	ldd	r22, Y+1	; 0x01
 1b2:	88 81       	ld	r24, Y
 1b4:	0e 94 98 01 	call	0x330	; 0x330 <DIO_enuSetPinValue>
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_AstrSwitchs != NULL)
	{
		u8 Local_u8Iterator =0;
		for (Local_u8Iterator=0; Local_u8Iterator < SW_NUM ; Local_u8Iterator++)
 1b8:	1f 5f       	subi	r17, 0xFF	; 255
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <Switch_enuInit+0x42>
 1bc:	7c 01       	movw	r14, r24
 1be:	10 e0       	ldi	r17, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	13 30       	cpi	r17, 0x03	; 3
 1c4:	30 f3       	brcs	.-52     	; 0x192 <Switch_enuInit+0x12>
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}

	return Local_enuErrorState;
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	08 95       	ret

000001d2 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_AstrSwitchs, u8 * Copy_pu8SwState)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_AstrSwitchs != NULL && Copy_pu8SwState != NULL)
 1d2:	00 97       	sbiw	r24, 0x00	; 0
 1d4:	51 f0       	breq	.+20     	; 0x1ea <Switch_enuGetState+0x18>
 1d6:	61 15       	cp	r22, r1
 1d8:	71 05       	cpc	r23, r1
 1da:	49 f0       	breq	.+18     	; 0x1ee <Switch_enuGetState+0x1c>
 1dc:	ab 01       	movw	r20, r22
 1de:	fc 01       	movw	r30, r24
	{
		Local_enuErrorState = DIO_enuGetPinValue(Copy_AstrSwitchs->SW_PortID, Copy_AstrSwitchs->SW_PinID, Copy_pu8SwState);
 1e0:	61 81       	ldd	r22, Z+1	; 0x01
 1e2:	80 81       	ld	r24, Z
 1e4:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_enuGetPinValue>
 1e8:	08 95       	ret
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	08 95       	ret
 1ee:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_enuErrorState;
}
 1f0:	08 95       	ret

000001f2 <main>:
#define F_CPU 8000000UL
#include <util/delay.h>
extern LED_t LED_AstrLedConfig [LED_NUM];
extern SW_t Switch_AstrSwitchState [SW_NUM];
int main(void)
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	1f 92       	push	r1
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
 1fc:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_enuInit>
	LED_enuInit(LED_AstrLedConfig);
 200:	80 e6       	ldi	r24, 0x60	; 96
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 41 00 	call	0x82	; 0x82 <LED_enuInit>
	Switch_enuInit(Switch_AstrSwitchState);
 208:	8c e6       	ldi	r24, 0x6C	; 108
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 c0 00 	call	0x180	; 0x180 <Switch_enuInit>
	u8 pinstate=0;
 210:	19 82       	std	Y+1, r1	; 0x01
	while (1)
	{
		Switch_enuGetState(&Switch_AstrSwitchState[1] , &pinstate);
 212:	be 01       	movw	r22, r28
 214:	6f 5f       	subi	r22, 0xFF	; 255
 216:	7f 4f       	sbci	r23, 0xFF	; 255
 218:	8f e6       	ldi	r24, 0x6F	; 111
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Switch_enuGetState>
		if (pinstate==0)
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	81 11       	cpse	r24, r1
 224:	05 c0       	rjmp	.+10     	; 0x230 <main+0x3e>
		LED_enuTurnON(&LED_AstrLedConfig[1]);
 226:	84 e6       	ldi	r24, 0x64	; 100
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 90 00 	call	0x120	; 0x120 <LED_enuTurnON>
 22e:	f1 cf       	rjmp	.-30     	; 0x212 <main+0x20>
		else
		LED_enuTurnOFF(&LED_AstrLedConfig[1]);
 230:	84 e6       	ldi	r24, 0x64	; 100
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 a8 00 	call	0x150	; 0x150 <LED_enuTurnOFF>
 238:	ec cf       	rjmp	.-40     	; 0x212 <main+0x20>

0000023a <DIO_enuInit>:
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
	}

	return Local_enuErrorstate;
}
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	8a bb       	out	0x1a, r24	; 26
 23e:	87 bb       	out	0x17, r24	; 23
 240:	86 e9       	ldi	r24, 0x96	; 150
 242:	84 bb       	out	0x14, r24	; 20
 244:	81 bb       	out	0x11, r24	; 17
 246:	1b ba       	out	0x1b, r1	; 27
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	08 95       	ret

0000024c <DIO_enuSetPinDirection>:
 24c:	84 30       	cpi	r24, 0x04	; 4
 24e:	08 f0       	brcs	.+2      	; 0x252 <DIO_enuSetPinDirection+0x6>
 250:	67 c0       	rjmp	.+206    	; 0x320 <DIO_enuSetPinDirection+0xd4>
 252:	68 30       	cpi	r22, 0x08	; 8
 254:	08 f0       	brcs	.+2      	; 0x258 <DIO_enuSetPinDirection+0xc>
 256:	66 c0       	rjmp	.+204    	; 0x324 <DIO_enuSetPinDirection+0xd8>
 258:	42 30       	cpi	r20, 0x02	; 2
 25a:	08 f0       	brcs	.+2      	; 0x25e <DIO_enuSetPinDirection+0x12>
 25c:	65 c0       	rjmp	.+202    	; 0x328 <DIO_enuSetPinDirection+0xdc>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	e9 f0       	breq	.+58     	; 0x29c <DIO_enuSetPinDirection+0x50>
 262:	30 f0       	brcs	.+12     	; 0x270 <DIO_enuSetPinDirection+0x24>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	81 f1       	breq	.+96     	; 0x2c8 <DIO_enuSetPinDirection+0x7c>
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	09 f4       	brne	.+2      	; 0x26e <DIO_enuSetPinDirection+0x22>
 26c:	43 c0       	rjmp	.+134    	; 0x2f4 <DIO_enuSetPinDirection+0xa8>
 26e:	5e c0       	rjmp	.+188    	; 0x32c <DIO_enuSetPinDirection+0xe0>
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	06 2e       	mov	r0, r22
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_enuSetPinDirection+0x30>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_enuSetPinDirection+0x2c>
 280:	80 95       	com	r24
 282:	2a b3       	in	r18, 0x1a	; 26
 284:	28 23       	and	r18, r24
 286:	84 2f       	mov	r24, r20
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_enuSetPinDirection+0x44>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_enuSetPinDirection+0x40>
 294:	82 2b       	or	r24, r18
 296:	8a bb       	out	0x1a, r24	; 26
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	08 95       	ret
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	06 2e       	mov	r0, r22
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_enuSetPinDirection+0x5c>
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_enuSetPinDirection+0x58>
 2ac:	20 95       	com	r18
 2ae:	87 b3       	in	r24, 0x17	; 23
 2b0:	28 23       	and	r18, r24
 2b2:	84 2f       	mov	r24, r20
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_enuSetPinDirection+0x70>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_enuSetPinDirection+0x6c>
 2c0:	82 2b       	or	r24, r18
 2c2:	87 bb       	out	0x17, r24	; 23
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	08 95       	ret
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	06 2e       	mov	r0, r22
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_enuSetPinDirection+0x88>
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	0a 94       	dec	r0
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_enuSetPinDirection+0x84>
 2d8:	20 95       	com	r18
 2da:	84 b3       	in	r24, 0x14	; 20
 2dc:	28 23       	and	r18, r24
 2de:	84 2f       	mov	r24, r20
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_enuSetPinDirection+0x9c>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_enuSetPinDirection+0x98>
 2ec:	82 2b       	or	r24, r18
 2ee:	84 bb       	out	0x14, r24	; 20
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	08 95       	ret
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	06 2e       	mov	r0, r22
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_enuSetPinDirection+0xb4>
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_enuSetPinDirection+0xb0>
 304:	20 95       	com	r18
 306:	81 b3       	in	r24, 0x11	; 17
 308:	28 23       	and	r18, r24
 30a:	84 2f       	mov	r24, r20
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_enuSetPinDirection+0xc8>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_enuSetPinDirection+0xc4>
 318:	82 2b       	or	r24, r18
 31a:	81 bb       	out	0x11, r24	; 17
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	08 95       	ret
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	08 95       	ret
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	08 95       	ret
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	08 95       	ret
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	08 95       	ret

00000330 <DIO_enuSetPinValue>:
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	08 f0       	brcs	.+2      	; 0x336 <DIO_enuSetPinValue+0x6>
 334:	67 c0       	rjmp	.+206    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 336:	68 30       	cpi	r22, 0x08	; 8
 338:	08 f0       	brcs	.+2      	; 0x33c <DIO_enuSetPinValue+0xc>
 33a:	66 c0       	rjmp	.+204    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 33c:	42 30       	cpi	r20, 0x02	; 2
 33e:	08 f0       	brcs	.+2      	; 0x342 <DIO_enuSetPinValue+0x12>
 340:	65 c0       	rjmp	.+202    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	e9 f0       	breq	.+58     	; 0x380 <DIO_enuSetPinValue+0x50>
 346:	30 f0       	brcs	.+12     	; 0x354 <DIO_enuSetPinValue+0x24>
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	81 f1       	breq	.+96     	; 0x3ac <DIO_enuSetPinValue+0x7c>
 34c:	83 30       	cpi	r24, 0x03	; 3
 34e:	09 f4       	brne	.+2      	; 0x352 <DIO_enuSetPinValue+0x22>
 350:	43 c0       	rjmp	.+134    	; 0x3d8 <DIO_enuSetPinValue+0xa8>
 352:	5e c0       	rjmp	.+188    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	06 2e       	mov	r0, r22
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_enuSetPinValue+0x30>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_enuSetPinValue+0x2c>
 364:	80 95       	com	r24
 366:	2b b3       	in	r18, 0x1b	; 27
 368:	28 23       	and	r18, r24
 36a:	84 2f       	mov	r24, r20
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_enuSetPinValue+0x44>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_enuSetPinValue+0x40>
 378:	82 2b       	or	r24, r18
 37a:	8b bb       	out	0x1b, r24	; 27
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	08 95       	ret
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	06 2e       	mov	r0, r22
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_enuSetPinValue+0x5c>
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_enuSetPinValue+0x58>
 390:	20 95       	com	r18
 392:	88 b3       	in	r24, 0x18	; 24
 394:	28 23       	and	r18, r24
 396:	84 2f       	mov	r24, r20
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_enuSetPinValue+0x70>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_enuSetPinValue+0x6c>
 3a4:	82 2b       	or	r24, r18
 3a6:	88 bb       	out	0x18, r24	; 24
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	08 95       	ret
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	06 2e       	mov	r0, r22
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_enuSetPinValue+0x88>
 3b4:	22 0f       	add	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_enuSetPinValue+0x84>
 3bc:	20 95       	com	r18
 3be:	85 b3       	in	r24, 0x15	; 21
 3c0:	28 23       	and	r18, r24
 3c2:	84 2f       	mov	r24, r20
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_enuSetPinValue+0x9c>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_enuSetPinValue+0x98>
 3d0:	82 2b       	or	r24, r18
 3d2:	85 bb       	out	0x15, r24	; 21
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	08 95       	ret
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	06 2e       	mov	r0, r22
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_enuSetPinValue+0xb4>
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_enuSetPinValue+0xb0>
 3e8:	20 95       	com	r18
 3ea:	82 b3       	in	r24, 0x12	; 18
 3ec:	28 23       	and	r18, r24
 3ee:	84 2f       	mov	r24, r20
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_enuSetPinValue+0xc8>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_enuSetPinValue+0xc4>
 3fc:	82 2b       	or	r24, r18
 3fe:	82 bb       	out	0x12, r24	; 18
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret
 404:	83 e0       	ldi	r24, 0x03	; 3
 406:	08 95       	ret
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	08 95       	ret
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	08 95       	ret
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	08 95       	ret

00000414 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
	ES_t Local_enuErrorstate = ES_NOK;

	if (Copy_pu8Value != NULL)
 414:	41 15       	cp	r20, r1
 416:	51 05       	cpc	r21, r1
 418:	e1 f1       	breq	.+120    	; 0x492 <DIO_enuGetPinValue+0x7e>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
 41a:	84 30       	cpi	r24, 0x04	; 4
 41c:	e0 f5       	brcc	.+120    	; 0x496 <DIO_enuGetPinValue+0x82>
 41e:	68 30       	cpi	r22, 0x08	; 8
 420:	e0 f5       	brcc	.+120    	; 0x49a <DIO_enuGetPinValue+0x86>
		Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	91 f0       	breq	.+36     	; 0x44a <DIO_enuGetPinValue+0x36>
 426:	28 f0       	brcs	.+10     	; 0x432 <DIO_enuGetPinValue+0x1e>
 428:	82 30       	cpi	r24, 0x02	; 2
 42a:	d9 f0       	breq	.+54     	; 0x462 <DIO_enuGetPinValue+0x4e>
 42c:	83 30       	cpi	r24, 0x03	; 3
 42e:	29 f1       	breq	.+74     	; 0x47a <DIO_enuGetPinValue+0x66>
 430:	36 c0       	rjmp	.+108    	; 0x49e <DIO_enuGetPinValue+0x8a>
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
 432:	89 b3       	in	r24, 0x19	; 25
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_enuGetPinValue+0x28>
 438:	95 95       	asr	r25
 43a:	87 95       	ror	r24
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_enuGetPinValue+0x24>
 440:	81 70       	andi	r24, 0x01	; 1
 442:	fa 01       	movw	r30, r20
 444:	80 83       	st	Z, r24
				break;
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
			}
			Local_enuErrorstate = ES_OK;
 446:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch (Copy_u8PortID)
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
 448:	08 95       	ret
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
 44a:	86 b3       	in	r24, 0x16	; 22
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_enuGetPinValue+0x40>
 450:	95 95       	asr	r25
 452:	87 95       	ror	r24
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_enuGetPinValue+0x3c>
 458:	81 70       	andi	r24, 0x01	; 1
 45a:	fa 01       	movw	r30, r20
 45c:	80 83       	st	Z, r24
				break;
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
			}
			Local_enuErrorstate = ES_OK;
 45e:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
 460:	08 95       	ret
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
 462:	83 b3       	in	r24, 0x13	; 19
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_enuGetPinValue+0x58>
 468:	95 95       	asr	r25
 46a:	87 95       	ror	r24
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_enuGetPinValue+0x54>
 470:	81 70       	andi	r24, 0x01	; 1
 472:	fa 01       	movw	r30, r20
 474:	80 83       	st	Z, r24
				break;
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
			}
			Local_enuErrorstate = ES_OK;
 476:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
 478:	08 95       	ret
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
 47a:	80 b3       	in	r24, 0x10	; 16
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_enuGetPinValue+0x70>
 480:	95 95       	asr	r25
 482:	87 95       	ror	r24
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_enuGetPinValue+0x6c>
 488:	81 70       	andi	r24, 0x01	; 1
 48a:	fa 01       	movw	r30, r20
 48c:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
 48e:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
 490:	08 95       	ret
			Local_enuErrorstate = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	08 95       	ret
			}
			Local_enuErrorstate = ES_OK;
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
 496:	83 e0       	ldi	r24, 0x03	; 3
 498:	08 95       	ret
 49a:	83 e0       	ldi	r24, 0x03	; 3
 49c:	08 95       	ret
				break;
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
				break;
			}
			Local_enuErrorstate = ES_OK;
 49e:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorstate = ES_NULL_POINTER;
	}

	return Local_enuErrorstate;
}
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
