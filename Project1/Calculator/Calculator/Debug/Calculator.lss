
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000020ca  0000215e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080009c  0080009c  0000219a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000219a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000454b  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8d  00000000  00000000  0000686b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000177c  00000000  00000000  000072f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00008a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e3  00000000  00000000  00008dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003978  00000000  00000000  000096bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000d033  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 0b 	call	0x1624	; 0x1624 <main>
      8a:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KPAD_enuInit>:

#include "util/delay.h"

extern uint8 KPAD_Auint8PadKeys[NUM_OF_ROWS][NUM_OF_COLUMNS];

ErrorStates_t KPAD_enuInit(KPAD_t* Copy_pstrKeyPadConfig){
      92:	cf 92       	push	r12
      94:	df 92       	push	r13
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	cf 93       	push	r28
      a0:	df 93       	push	r29
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	if(Copy_pstrKeyPadConfig != NULL){
      a2:	00 97       	sbiw	r24, 0x00	; 0
      a4:	09 f0       	breq	.+2      	; 0xa8 <KPAD_enuInit+0x16>
      a6:	45 c0       	rjmp	.+138    	; 0x132 <KPAD_enuInit+0xa0>
				Local_enuErrorStates = DIO_enuSetPinValue(Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strCols[Local_uint8Iterator2].C_uint8Port, Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strCols[Local_uint8Iterator2].C_uint8Pin, HIGH);
			}
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
      a8:	82 e0       	ldi	r24, 0x02	; 2
      aa:	48 c0       	rjmp	.+144    	; 0x13c <KPAD_enuInit+0xaa>
		uint8 Local_uint8Iterator1;
		uint8 Local_uint8Iterator2;
		for(Local_uint8Iterator1 = 0; Local_uint8Iterator1 < NUM_OF_KPADS; Local_uint8Iterator1++){

			for(Local_uint8Iterator2 = 0; Local_uint8Iterator2 < NUM_OF_ROWS; Local_uint8Iterator2++){
				Local_enuErrorStates = DIO_enuSetPinDir(Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Port, Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Pin, INPUT);
      ac:	cf 2d       	mov	r28, r15
      ae:	d0 e0       	ldi	r29, 0x00	; 0
      b0:	cc 0f       	add	r28, r28
      b2:	dd 1f       	adc	r29, r29
      b4:	c8 01       	movw	r24, r16
      b6:	20 e1       	ldi	r18, 0x10	; 16
      b8:	d2 9e       	mul	r13, r18
      ba:	80 0d       	add	r24, r0
      bc:	91 1d       	adc	r25, r1
      be:	11 24       	eor	r1, r1
      c0:	c8 0f       	add	r28, r24
      c2:	d9 1f       	adc	r29, r25
      c4:	69 81       	ldd	r22, Y+1	; 0x01
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	88 81       	ld	r24, Y
      ca:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DIO_enuSetPinDir>
				Local_enuErrorStates = DIO_enuSetPinValue(Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Port, Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Pin, PULL_UP);
      ce:	69 81       	ldd	r22, Y+1	; 0x01
      d0:	41 e0       	ldi	r20, 0x01	; 1
      d2:	88 81       	ld	r24, Y
      d4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	if(Copy_pstrKeyPadConfig != NULL){
		uint8 Local_uint8Iterator1;
		uint8 Local_uint8Iterator2;
		for(Local_uint8Iterator1 = 0; Local_uint8Iterator1 < NUM_OF_KPADS; Local_uint8Iterator1++){

			for(Local_uint8Iterator2 = 0; Local_uint8Iterator2 < NUM_OF_ROWS; Local_uint8Iterator2++){
      d8:	f3 94       	inc	r15
      da:	01 c0       	rjmp	.+2      	; 0xde <KPAD_enuInit+0x4c>
      dc:	f1 2c       	mov	r15, r1
      de:	93 e0       	ldi	r25, 0x03	; 3
      e0:	9f 15       	cp	r25, r15
      e2:	20 f7       	brcc	.-56     	; 0xac <KPAD_enuInit+0x1a>
      e4:	c1 2c       	mov	r12, r1
      e6:	20 c0       	rjmp	.+64     	; 0x128 <KPAD_enuInit+0x96>
				Local_enuErrorStates = DIO_enuSetPinDir(Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Port, Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Pin, INPUT);
				Local_enuErrorStates = DIO_enuSetPinValue(Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Port, Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Pin, PULL_UP);
			}

			for(Local_uint8Iterator2 = 0; Local_uint8Iterator2 < NUM_OF_ROWS; Local_uint8Iterator2++){
				Local_enuErrorStates = DIO_enuSetPinDir(Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strCols[Local_uint8Iterator2].C_uint8Port, Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strCols[Local_uint8Iterator2].C_uint8Pin, OUTPUT);
      e8:	2c 2d       	mov	r18, r12
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	79 01       	movw	r14, r18
      ee:	ee 0c       	add	r14, r14
      f0:	ff 1c       	adc	r15, r15
      f2:	e8 01       	movw	r28, r16
      f4:	e0 e1       	ldi	r30, 0x10	; 16
      f6:	de 9e       	mul	r13, r30
      f8:	c0 0d       	add	r28, r0
      fa:	d1 1d       	adc	r29, r1
      fc:	11 24       	eor	r1, r1
      fe:	ec 0e       	add	r14, r28
     100:	fd 1e       	adc	r15, r29
     102:	f7 01       	movw	r30, r14
     104:	61 85       	ldd	r22, Z+9	; 0x09
     106:	2c 5f       	subi	r18, 0xFC	; 252
     108:	3f 4f       	sbci	r19, 0xFF	; 255
     10a:	22 0f       	add	r18, r18
     10c:	33 1f       	adc	r19, r19
     10e:	c2 0f       	add	r28, r18
     110:	d3 1f       	adc	r29, r19
     112:	41 e0       	ldi	r20, 0x01	; 1
     114:	88 81       	ld	r24, Y
     116:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DIO_enuSetPinDir>
				Local_enuErrorStates = DIO_enuSetPinValue(Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strCols[Local_uint8Iterator2].C_uint8Port, Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strCols[Local_uint8Iterator2].C_uint8Pin, HIGH);
     11a:	f7 01       	movw	r30, r14
     11c:	61 85       	ldd	r22, Z+9	; 0x09
     11e:	41 e0       	ldi	r20, 0x01	; 1
     120:	88 81       	ld	r24, Y
     122:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
			for(Local_uint8Iterator2 = 0; Local_uint8Iterator2 < NUM_OF_ROWS; Local_uint8Iterator2++){
				Local_enuErrorStates = DIO_enuSetPinDir(Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Port, Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Pin, INPUT);
				Local_enuErrorStates = DIO_enuSetPinValue(Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Port, Copy_pstrKeyPadConfig[Local_uint8Iterator1].KPAD_strRows[Local_uint8Iterator2].R_uint8Pin, PULL_UP);
			}

			for(Local_uint8Iterator2 = 0; Local_uint8Iterator2 < NUM_OF_ROWS; Local_uint8Iterator2++){
     126:	c3 94       	inc	r12
     128:	f3 e0       	ldi	r31, 0x03	; 3
     12a:	fc 15       	cp	r31, r12
     12c:	e8 f6       	brcc	.-70     	; 0xe8 <KPAD_enuInit+0x56>
ErrorStates_t KPAD_enuInit(KPAD_t* Copy_pstrKeyPadConfig){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	if(Copy_pstrKeyPadConfig != NULL){
		uint8 Local_uint8Iterator1;
		uint8 Local_uint8Iterator2;
		for(Local_uint8Iterator1 = 0; Local_uint8Iterator1 < NUM_OF_KPADS; Local_uint8Iterator1++){
     12e:	d3 94       	inc	r13
     130:	03 c0       	rjmp	.+6      	; 0x138 <KPAD_enuInit+0xa6>
     132:	8c 01       	movw	r16, r24
     134:	d1 2c       	mov	r13, r1
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	dd 20       	and	r13, r13
     13a:	81 f2       	breq	.-96     	; 0xdc <KPAD_enuInit+0x4a>
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
	}
	return Local_enuErrorStates;
}
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	1f 91       	pop	r17
     142:	0f 91       	pop	r16
     144:	ff 90       	pop	r15
     146:	ef 90       	pop	r14
     148:	df 90       	pop	r13
     14a:	cf 90       	pop	r12
     14c:	08 95       	ret

0000014e <KPAD_enuGetPressedkey>:

ErrorStates_t KPAD_enuGetPressedkey(KPAD_t* Copy_pstrKeyPadConfig, uint8* Copy_puint8Value){
     14e:	8f 92       	push	r8
     150:	9f 92       	push	r9
     152:	af 92       	push	r10
     154:	bf 92       	push	r11
     156:	cf 92       	push	r12
     158:	df 92       	push	r13
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	1f 92       	push	r1
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	if(Copy_pstrKeyPadConfig != NULL && Copy_puint8Value != NULL)
     16c:	00 97       	sbiw	r24, 0x00	; 0
     16e:	09 f4       	brne	.+2      	; 0x172 <KPAD_enuGetPressedkey+0x24>
     170:	84 c0       	rjmp	.+264    	; 0x27a <KPAD_enuGetPressedkey+0x12c>
     172:	61 15       	cp	r22, r1
     174:	71 05       	cpc	r23, r1
     176:	09 f4       	brne	.+2      	; 0x17a <KPAD_enuGetPressedkey+0x2c>
     178:	82 c0       	rjmp	.+260    	; 0x27e <KPAD_enuGetPressedkey+0x130>
     17a:	5b 01       	movw	r10, r22
     17c:	8c 01       	movw	r16, r24
	{
		*Copy_puint8Value = 0;
     17e:	fb 01       	movw	r30, r22
     180:	10 82       	st	Z, r1
		uint8 Local_uint8RowsIterator, Local_uint8ColsIterator, Local_uint8GetKey;
		for(Local_uint8ColsIterator = 0; Local_uint8ColsIterator < NUM_OF_COLUMNS; Local_uint8ColsIterator++)
     182:	81 2c       	mov	r8, r1
	}
	return Local_enuErrorStates;
}

ErrorStates_t KPAD_enuGetPressedkey(KPAD_t* Copy_pstrKeyPadConfig, uint8* Copy_puint8Value){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
     184:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_pstrKeyPadConfig != NULL && Copy_puint8Value != NULL)
	{
		*Copy_puint8Value = 0;
		uint8 Local_uint8RowsIterator, Local_uint8ColsIterator, Local_uint8GetKey;
		for(Local_uint8ColsIterator = 0; Local_uint8ColsIterator < NUM_OF_COLUMNS; Local_uint8ColsIterator++)
     186:	74 c0       	rjmp	.+232    	; 0x270 <KPAD_enuGetPressedkey+0x122>
		{
			Local_enuErrorStates = DIO_enuSetPinValue(Copy_pstrKeyPadConfig->KPAD_strCols[Local_uint8ColsIterator].C_uint8Port, Copy_pstrKeyPadConfig->KPAD_strCols[Local_uint8ColsIterator].C_uint8Pin, LOW);
     188:	e8 2c       	mov	r14, r8
     18a:	f1 2c       	mov	r15, r1
     18c:	f7 01       	movw	r30, r14
     18e:	ee 0f       	add	r30, r30
     190:	ff 1f       	adc	r31, r31
     192:	e0 0f       	add	r30, r16
     194:	f1 1f       	adc	r31, r17
     196:	61 85       	ldd	r22, Z+9	; 0x09
     198:	f7 01       	movw	r30, r14
     19a:	34 96       	adiw	r30, 0x04	; 4
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e0 0f       	add	r30, r16
     1a2:	f1 1f       	adc	r31, r17
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
			for(Local_uint8RowsIterator = 0; Local_uint8RowsIterator < NUM_OF_ROWS; Local_uint8RowsIterator++)
     1ac:	91 2c       	mov	r9, r1
     1ae:	4b c0       	rjmp	.+150    	; 0x246 <KPAD_enuGetPressedkey+0xf8>
			{
				Local_enuErrorStates = DIO_enuGetPinValue(Copy_pstrKeyPadConfig->KPAD_strRows[Local_uint8RowsIterator].R_uint8Port, Copy_pstrKeyPadConfig->KPAD_strRows[Local_uint8RowsIterator].R_uint8Pin, &Local_uint8GetKey);
     1b0:	c9 2c       	mov	r12, r9
     1b2:	d1 2c       	mov	r13, r1
     1b4:	f6 01       	movw	r30, r12
     1b6:	ee 0f       	add	r30, r30
     1b8:	ff 1f       	adc	r31, r31
     1ba:	e0 0f       	add	r30, r16
     1bc:	f1 1f       	adc	r31, r17
     1be:	61 81       	ldd	r22, Z+1	; 0x01
     1c0:	ae 01       	movw	r20, r28
     1c2:	4f 5f       	subi	r20, 0xFF	; 255
     1c4:	5f 4f       	sbci	r21, 0xFF	; 255
     1c6:	80 81       	ld	r24, Z
     1c8:	0e 94 84 0c 	call	0x1908	; 0x1908 <DIO_enuGetPinValue>
				if(!Local_uint8GetKey)
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	81 11       	cpse	r24, r1
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <KPAD_enuGetPressedkey+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d2:	8f e0       	ldi	r24, 0x0F	; 15
     1d4:	97 e2       	ldi	r25, 0x27	; 39
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <KPAD_enuGetPressedkey+0x88>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <KPAD_enuGetPressedkey+0x8e>
     1dc:	00 00       	nop
				{
					_delay_ms(5);
					Local_enuErrorStates = DIO_enuGetPinValue(Copy_pstrKeyPadConfig->KPAD_strRows[Local_uint8RowsIterator].R_uint8Port, Copy_pstrKeyPadConfig->KPAD_strRows[Local_uint8RowsIterator].R_uint8Pin, &Local_uint8GetKey);
     1de:	f6 01       	movw	r30, r12
     1e0:	ee 0f       	add	r30, r30
     1e2:	ff 1f       	adc	r31, r31
     1e4:	e0 0f       	add	r30, r16
     1e6:	f1 1f       	adc	r31, r17
     1e8:	61 81       	ldd	r22, Z+1	; 0x01
     1ea:	ae 01       	movw	r20, r28
     1ec:	4f 5f       	subi	r20, 0xFF	; 255
     1ee:	5f 4f       	sbci	r21, 0xFF	; 255
     1f0:	80 81       	ld	r24, Z
     1f2:	0e 94 84 0c 	call	0x1908	; 0x1908 <DIO_enuGetPinValue>
					if(!Local_uint8GetKey)
     1f6:	99 81       	ldd	r25, Y+1	; 0x01
     1f8:	91 11       	cpse	r25, r1
     1fa:	24 c0       	rjmp	.+72     	; 0x244 <KPAD_enuGetPressedkey+0xf6>
     1fc:	ef e0       	ldi	r30, 0x0F	; 15
     1fe:	f7 e2       	ldi	r31, 0x27	; 39
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <KPAD_enuGetPressedkey+0xb2>
     204:	00 c0       	rjmp	.+0      	; 0x206 <KPAD_enuGetPressedkey+0xb8>
     206:	00 00       	nop
     208:	0c c0       	rjmp	.+24     	; 0x222 <KPAD_enuGetPressedkey+0xd4>
					{
						_delay_ms(5);
						while(!Local_uint8GetKey)
						{
							Local_enuErrorStates = DIO_enuGetPinValue(Copy_pstrKeyPadConfig->KPAD_strRows[Local_uint8RowsIterator].R_uint8Port, Copy_pstrKeyPadConfig->KPAD_strRows[Local_uint8RowsIterator].R_uint8Pin, &Local_uint8GetKey);
     20a:	f6 01       	movw	r30, r12
     20c:	ee 0f       	add	r30, r30
     20e:	ff 1f       	adc	r31, r31
     210:	e0 0f       	add	r30, r16
     212:	f1 1f       	adc	r31, r17
     214:	61 81       	ldd	r22, Z+1	; 0x01
     216:	ae 01       	movw	r20, r28
     218:	4f 5f       	subi	r20, 0xFF	; 255
     21a:	5f 4f       	sbci	r21, 0xFF	; 255
     21c:	80 81       	ld	r24, Z
     21e:	0e 94 84 0c 	call	0x1908	; 0x1908 <DIO_enuGetPinValue>
					_delay_ms(5);
					Local_enuErrorStates = DIO_enuGetPinValue(Copy_pstrKeyPadConfig->KPAD_strRows[Local_uint8RowsIterator].R_uint8Port, Copy_pstrKeyPadConfig->KPAD_strRows[Local_uint8RowsIterator].R_uint8Pin, &Local_uint8GetKey);
					if(!Local_uint8GetKey)
					{
						_delay_ms(5);
						while(!Local_uint8GetKey)
     222:	99 81       	ldd	r25, Y+1	; 0x01
     224:	99 23       	and	r25, r25
     226:	89 f3       	breq	.-30     	; 0x20a <KPAD_enuGetPressedkey+0xbc>
						{
							Local_enuErrorStates = DIO_enuGetPinValue(Copy_pstrKeyPadConfig->KPAD_strRows[Local_uint8RowsIterator].R_uint8Port, Copy_pstrKeyPadConfig->KPAD_strRows[Local_uint8RowsIterator].R_uint8Pin, &Local_uint8GetKey);
						}
						*Copy_puint8Value = KPAD_Auint8PadKeys[Local_uint8RowsIterator][Local_uint8ColsIterator];
     228:	96 01       	movw	r18, r12
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	20 59       	subi	r18, 0x90	; 144
     234:	3f 4f       	sbci	r19, 0xFF	; 255
     236:	f9 01       	movw	r30, r18
     238:	ee 0d       	add	r30, r14
     23a:	ff 1d       	adc	r31, r15
     23c:	90 81       	ld	r25, Z
     23e:	f5 01       	movw	r30, r10
     240:	90 83       	st	Z, r25
     242:	1e c0       	rjmp	.+60     	; 0x280 <KPAD_enuGetPressedkey+0x132>
		*Copy_puint8Value = 0;
		uint8 Local_uint8RowsIterator, Local_uint8ColsIterator, Local_uint8GetKey;
		for(Local_uint8ColsIterator = 0; Local_uint8ColsIterator < NUM_OF_COLUMNS; Local_uint8ColsIterator++)
		{
			Local_enuErrorStates = DIO_enuSetPinValue(Copy_pstrKeyPadConfig->KPAD_strCols[Local_uint8ColsIterator].C_uint8Port, Copy_pstrKeyPadConfig->KPAD_strCols[Local_uint8ColsIterator].C_uint8Pin, LOW);
			for(Local_uint8RowsIterator = 0; Local_uint8RowsIterator < NUM_OF_ROWS; Local_uint8RowsIterator++)
     244:	93 94       	inc	r9
     246:	f3 e0       	ldi	r31, 0x03	; 3
     248:	f9 15       	cp	r31, r9
     24a:	08 f0       	brcs	.+2      	; 0x24e <KPAD_enuGetPressedkey+0x100>
     24c:	b1 cf       	rjmp	.-158    	; 0x1b0 <KPAD_enuGetPressedkey+0x62>
						*Copy_puint8Value = KPAD_Auint8PadKeys[Local_uint8RowsIterator][Local_uint8ColsIterator];
						return Local_enuErrorStates;
					}
				}
			}
			Local_enuErrorStates = DIO_enuSetPinValue(Copy_pstrKeyPadConfig->KPAD_strCols[Local_uint8ColsIterator].C_uint8Port, Copy_pstrKeyPadConfig->KPAD_strCols[Local_uint8ColsIterator].C_uint8Pin, HIGH);
     24e:	f7 01       	movw	r30, r14
     250:	ee 0f       	add	r30, r30
     252:	ff 1f       	adc	r31, r31
     254:	e0 0f       	add	r30, r16
     256:	f1 1f       	adc	r31, r17
     258:	61 85       	ldd	r22, Z+9	; 0x09
     25a:	f7 01       	movw	r30, r14
     25c:	34 96       	adiw	r30, 0x04	; 4
     25e:	ee 0f       	add	r30, r30
     260:	ff 1f       	adc	r31, r31
     262:	e0 0f       	add	r30, r16
     264:	f1 1f       	adc	r31, r17
     266:	41 e0       	ldi	r20, 0x01	; 1
     268:	80 81       	ld	r24, Z
     26a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	if(Copy_pstrKeyPadConfig != NULL && Copy_puint8Value != NULL)
	{
		*Copy_puint8Value = 0;
		uint8 Local_uint8RowsIterator, Local_uint8ColsIterator, Local_uint8GetKey;
		for(Local_uint8ColsIterator = 0; Local_uint8ColsIterator < NUM_OF_COLUMNS; Local_uint8ColsIterator++)
     26e:	83 94       	inc	r8
     270:	93 e0       	ldi	r25, 0x03	; 3
     272:	98 15       	cp	r25, r8
     274:	08 f0       	brcs	.+2      	; 0x278 <KPAD_enuGetPressedkey+0x12a>
     276:	88 cf       	rjmp	.-240    	; 0x188 <KPAD_enuGetPressedkey+0x3a>
}

ErrorStates_t KPAD_enuGetPressedkey(KPAD_t* Copy_pstrKeyPadConfig, uint8* Copy_puint8Value){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	if(Copy_pstrKeyPadConfig != NULL && Copy_puint8Value != NULL)
	{
     278:	03 c0       	rjmp	.+6      	; 0x280 <KPAD_enuGetPressedkey+0x132>
			Local_enuErrorStates = DIO_enuSetPinValue(Copy_pstrKeyPadConfig->KPAD_strCols[Local_uint8ColsIterator].C_uint8Port, Copy_pstrKeyPadConfig->KPAD_strCols[Local_uint8ColsIterator].C_uint8Pin, HIGH);
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULL_POINTER;
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	01 c0       	rjmp	.+2      	; 0x280 <KPAD_enuGetPressedkey+0x132>
     27e:	82 e0       	ldi	r24, 0x02	; 2
	}
	return Local_enuErrorStates;
}
     280:	0f 90       	pop	r0
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	ff 90       	pop	r15
     28c:	ef 90       	pop	r14
     28e:	df 90       	pop	r13
     290:	cf 90       	pop	r12
     292:	bf 90       	pop	r11
     294:	af 90       	pop	r10
     296:	9f 90       	pop	r9
     298:	8f 90       	pop	r8
     29a:	08 95       	ret

0000029c <LCD_enuInit>:

ErrorStates_t LCD_enuDisplayInteger(sint64 Copy_uint32Data){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	Local_enuErrorStates = LCD_enuDisplayNumber(Copy_uint32Data);
	return Local_enuErrorStates;
}
     29c:	41 e0       	ldi	r20, 0x01	; 1
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DIO_enuSetPinDir>
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DIO_enuSetPinDir>
     2b0:	41 e0       	ldi	r20, 0x01	; 1
     2b2:	62 e0       	ldi	r22, 0x02	; 2
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DIO_enuSetPinDir>
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	63 e0       	ldi	r22, 0x03	; 3
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DIO_enuSetPinDir>
     2c4:	41 e0       	ldi	r20, 0x01	; 1
     2c6:	64 e0       	ldi	r22, 0x04	; 4
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DIO_enuSetPinDir>
     2ce:	41 e0       	ldi	r20, 0x01	; 1
     2d0:	65 e0       	ldi	r22, 0x05	; 5
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DIO_enuSetPinDir>
     2d8:	41 e0       	ldi	r20, 0x01	; 1
     2da:	66 e0       	ldi	r22, 0x06	; 6
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DIO_enuSetPinDir>
     2e2:	8f e5       	ldi	r24, 0x5F	; 95
     2e4:	9a ee       	ldi	r25, 0xEA	; 234
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_enuInit+0x4a>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_enuInit+0x50>
     2ec:	00 00       	nop
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     302:	40 e0       	ldi	r20, 0x00	; 0
     304:	62 e0       	ldi	r22, 0x02	; 2
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	63 e0       	ldi	r22, 0x03	; 3
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	64 e0       	ldi	r22, 0x04	; 4
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     320:	41 e0       	ldi	r20, 0x01	; 1
     322:	65 e0       	ldi	r22, 0x05	; 5
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	66 e0       	ldi	r22, 0x06	; 6
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     334:	41 e0       	ldi	r20, 0x01	; 1
     336:	62 e0       	ldi	r22, 0x02	; 2
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     33e:	ef e1       	ldi	r30, 0x1F	; 31
     340:	fe e4       	ldi	r31, 0x4E	; 78
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <LCD_enuInit+0xa6>
     346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_enuInit+0xac>
     348:	00 00       	nop
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	62 e0       	ldi	r22, 0x02	; 2
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     354:	8f e1       	ldi	r24, 0x1F	; 31
     356:	9e e4       	ldi	r25, 0x4E	; 78
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <LCD_enuInit+0xbc>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_enuInit+0xc2>
     35e:	00 00       	nop
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	63 e0       	ldi	r22, 0x03	; 3
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	64 e0       	ldi	r22, 0x04	; 4
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     374:	41 e0       	ldi	r20, 0x01	; 1
     376:	65 e0       	ldi	r22, 0x05	; 5
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	66 e0       	ldi	r22, 0x06	; 6
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     388:	41 e0       	ldi	r20, 0x01	; 1
     38a:	62 e0       	ldi	r22, 0x02	; 2
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     392:	ef e1       	ldi	r30, 0x1F	; 31
     394:	fe e4       	ldi	r31, 0x4E	; 78
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <LCD_enuInit+0xfa>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_enuInit+0x100>
     39c:	00 00       	nop
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	62 e0       	ldi	r22, 0x02	; 2
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     3a8:	8f e1       	ldi	r24, 0x1F	; 31
     3aa:	9e e4       	ldi	r25, 0x4E	; 78
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_enuInit+0x110>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_enuInit+0x116>
     3b2:	00 00       	nop
     3b4:	41 e0       	ldi	r20, 0x01	; 1
     3b6:	63 e0       	ldi	r22, 0x03	; 3
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	64 e0       	ldi	r22, 0x04	; 4
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	65 e0       	ldi	r22, 0x05	; 5
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	66 e0       	ldi	r22, 0x06	; 6
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     3dc:	41 e0       	ldi	r20, 0x01	; 1
     3de:	62 e0       	ldi	r22, 0x02	; 2
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     3e6:	ef e1       	ldi	r30, 0x1F	; 31
     3e8:	fe e4       	ldi	r31, 0x4E	; 78
     3ea:	31 97       	sbiw	r30, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_enuInit+0x14e>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_enuInit+0x154>
     3f0:	00 00       	nop
     3f2:	40 e0       	ldi	r20, 0x00	; 0
     3f4:	62 e0       	ldi	r22, 0x02	; 2
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     3fc:	8f e1       	ldi	r24, 0x1F	; 31
     3fe:	9e e4       	ldi	r25, 0x4E	; 78
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     406:	00 00       	nop
     408:	ef ec       	ldi	r30, 0xCF	; 207
     40a:	f7 e0       	ldi	r31, 0x07	; 7
     40c:	31 97       	sbiw	r30, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     412:	00 00       	nop
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	62 e0       	ldi	r22, 0x02	; 2
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	63 e0       	ldi	r22, 0x03	; 3
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	64 e0       	ldi	r22, 0x04	; 4
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	65 e0       	ldi	r22, 0x05	; 5
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	66 e0       	ldi	r22, 0x06	; 6
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     45a:	41 e0       	ldi	r20, 0x01	; 1
     45c:	62 e0       	ldi	r22, 0x02	; 2
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     464:	8f e1       	ldi	r24, 0x1F	; 31
     466:	9e e4       	ldi	r25, 0x4E	; 78
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     46e:	00 00       	nop
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	62 e0       	ldi	r22, 0x02	; 2
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     47a:	ef e1       	ldi	r30, 0x1F	; 31
     47c:	fe e4       	ldi	r31, 0x4E	; 78
     47e:	31 97       	sbiw	r30, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     482:	00 c0       	rjmp	.+0      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     484:	00 00       	nop
     486:	41 e0       	ldi	r20, 0x01	; 1
     488:	63 e0       	ldi	r22, 0x03	; 3
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     490:	41 e0       	ldi	r20, 0x01	; 1
     492:	64 e0       	ldi	r22, 0x04	; 4
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	65 e0       	ldi	r22, 0x05	; 5
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     4a4:	41 e0       	ldi	r20, 0x01	; 1
     4a6:	66 e0       	ldi	r22, 0x06	; 6
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	62 e0       	ldi	r22, 0x02	; 2
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     4b8:	8f e1       	ldi	r24, 0x1F	; 31
     4ba:	9e e4       	ldi	r25, 0x4E	; 78
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
     4c2:	00 00       	nop
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	62 e0       	ldi	r22, 0x02	; 2
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     4ce:	ef e1       	ldi	r30, 0x1F	; 31
     4d0:	fe e4       	ldi	r31, 0x4E	; 78
     4d2:	31 97       	sbiw	r30, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     4d8:	00 00       	nop
     4da:	8f ec       	ldi	r24, 0xCF	; 207
     4dc:	97 e0       	ldi	r25, 0x07	; 7
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
     4e4:	00 00       	nop
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	63 e0       	ldi	r22, 0x03	; 3
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	64 e0       	ldi	r22, 0x04	; 4
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	65 e0       	ldi	r22, 0x05	; 5
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	66 e0       	ldi	r22, 0x06	; 6
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	62 e0       	ldi	r22, 0x02	; 2
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     536:	ef e1       	ldi	r30, 0x1F	; 31
     538:	fe e4       	ldi	r31, 0x4E	; 78
     53a:	31 97       	sbiw	r30, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
     540:	00 00       	nop
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	62 e0       	ldi	r22, 0x02	; 2
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     54c:	8f e1       	ldi	r24, 0x1F	; 31
     54e:	9e e4       	ldi	r25, 0x4E	; 78
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
     554:	00 c0       	rjmp	.+0      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
     556:	00 00       	nop
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	63 e0       	ldi	r22, 0x03	; 3
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	64 e0       	ldi	r22, 0x04	; 4
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     56c:	40 e0       	ldi	r20, 0x00	; 0
     56e:	65 e0       	ldi	r22, 0x05	; 5
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	66 e0       	ldi	r22, 0x06	; 6
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	62 e0       	ldi	r22, 0x02	; 2
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     58a:	ef e1       	ldi	r30, 0x1F	; 31
     58c:	fe e4       	ldi	r31, 0x4E	; 78
     58e:	31 97       	sbiw	r30, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
     592:	00 c0       	rjmp	.+0      	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
     594:	00 00       	nop
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	62 e0       	ldi	r22, 0x02	; 2
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     5a0:	8f e1       	ldi	r24, 0x1F	; 31
     5a2:	9e e4       	ldi	r25, 0x4E	; 78
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
     5aa:	00 00       	nop
     5ac:	ef e9       	ldi	r30, 0x9F	; 159
     5ae:	ff e0       	ldi	r31, 0x0F	; 15
     5b0:	31 97       	sbiw	r30, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
     5b6:	00 00       	nop
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	62 e0       	ldi	r22, 0x02	; 2
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	63 e0       	ldi	r22, 0x03	; 3
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	64 e0       	ldi	r22, 0x04	; 4
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	65 e0       	ldi	r22, 0x05	; 5
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	66 e0       	ldi	r22, 0x06	; 6
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     5fe:	41 e0       	ldi	r20, 0x01	; 1
     600:	62 e0       	ldi	r22, 0x02	; 2
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     608:	8f e1       	ldi	r24, 0x1F	; 31
     60a:	9e e4       	ldi	r25, 0x4E	; 78
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
     610:	00 c0       	rjmp	.+0      	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
     612:	00 00       	nop
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	62 e0       	ldi	r22, 0x02	; 2
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     61e:	ef e1       	ldi	r30, 0x1F	; 31
     620:	fe e4       	ldi	r31, 0x4E	; 78
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
     626:	00 c0       	rjmp	.+0      	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
     628:	00 00       	nop
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	63 e0       	ldi	r22, 0x03	; 3
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	64 e0       	ldi	r22, 0x04	; 4
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	65 e0       	ldi	r22, 0x05	; 5
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	66 e0       	ldi	r22, 0x06	; 6
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     652:	41 e0       	ldi	r20, 0x01	; 1
     654:	62 e0       	ldi	r22, 0x02	; 2
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     65c:	8f e1       	ldi	r24, 0x1F	; 31
     65e:	9e e4       	ldi	r25, 0x4E	; 78
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
     664:	00 c0       	rjmp	.+0      	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
     666:	00 00       	nop
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	62 e0       	ldi	r22, 0x02	; 2
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     672:	ef e1       	ldi	r30, 0x1F	; 31
     674:	fe e4       	ldi	r31, 0x4E	; 78
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
     67c:	00 00       	nop
     67e:	08 95       	ret

00000680 <LCD_enuSendCommand>:
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	c8 2f       	mov	r28, r24
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	62 e0       	ldi	r22, 0x02	; 2
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     6aa:	fc 2e       	mov	r15, r28
     6ac:	ff 1c       	adc	r15, r15
     6ae:	ff 24       	eor	r15, r15
     6b0:	ff 1c       	adc	r15, r15
     6b2:	4f 2d       	mov	r20, r15
     6b4:	63 e0       	ldi	r22, 0x03	; 3
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     6bc:	c6 fb       	bst	r28, 6
     6be:	00 27       	eor	r16, r16
     6c0:	00 f9       	bld	r16, 0
     6c2:	40 2f       	mov	r20, r16
     6c4:	64 e0       	ldi	r22, 0x04	; 4
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     6cc:	c5 fb       	bst	r28, 5
     6ce:	11 27       	eor	r17, r17
     6d0:	10 f9       	bld	r17, 0
     6d2:	41 2f       	mov	r20, r17
     6d4:	65 e0       	ldi	r22, 0x05	; 5
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     6dc:	c4 fb       	bst	r28, 4
     6de:	dd 27       	eor	r29, r29
     6e0:	d0 f9       	bld	r29, 0
     6e2:	4d 2f       	mov	r20, r29
     6e4:	66 e0       	ldi	r22, 0x06	; 6
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     6ec:	c8 32       	cpi	r28, 0x28	; 40
     6ee:	51 f5       	brne	.+84     	; 0x744 <LCD_enuSendCommand+0xc4>
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	62 e0       	ldi	r22, 0x02	; 2
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     6fa:	8f e1       	ldi	r24, 0x1F	; 31
     6fc:	9e e4       	ldi	r25, 0x4E	; 78
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <LCD_enuSendCommand+0x7e>
     702:	00 c0       	rjmp	.+0      	; 0x704 <LCD_enuSendCommand+0x84>
     704:	00 00       	nop
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	62 e0       	ldi	r22, 0x02	; 2
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     710:	8f e1       	ldi	r24, 0x1F	; 31
     712:	9e e4       	ldi	r25, 0x4E	; 78
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <LCD_enuSendCommand+0x94>
     718:	00 c0       	rjmp	.+0      	; 0x71a <LCD_enuSendCommand+0x9a>
     71a:	00 00       	nop
     71c:	4f 2d       	mov	r20, r15
     71e:	63 e0       	ldi	r22, 0x03	; 3
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     726:	40 2f       	mov	r20, r16
     728:	64 e0       	ldi	r22, 0x04	; 4
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     730:	41 2f       	mov	r20, r17
     732:	65 e0       	ldi	r22, 0x05	; 5
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     73a:	4d 2f       	mov	r20, r29
     73c:	66 e0       	ldi	r22, 0x06	; 6
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	62 e0       	ldi	r22, 0x02	; 2
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     74e:	8f e1       	ldi	r24, 0x1F	; 31
     750:	9e e4       	ldi	r25, 0x4E	; 78
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <LCD_enuSendCommand+0xd2>
     756:	00 c0       	rjmp	.+0      	; 0x758 <LCD_enuSendCommand+0xd8>
     758:	00 00       	nop
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	62 e0       	ldi	r22, 0x02	; 2
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     764:	8f e1       	ldi	r24, 0x1F	; 31
     766:	9e e4       	ldi	r25, 0x4E	; 78
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <LCD_enuSendCommand+0xe8>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <LCD_enuSendCommand+0xee>
     76e:	00 00       	nop
     770:	c3 fb       	bst	r28, 3
     772:	44 27       	eor	r20, r20
     774:	40 f9       	bld	r20, 0
     776:	63 e0       	ldi	r22, 0x03	; 3
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     77e:	c2 fb       	bst	r28, 2
     780:	44 27       	eor	r20, r20
     782:	40 f9       	bld	r20, 0
     784:	64 e0       	ldi	r22, 0x04	; 4
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     78c:	c1 fb       	bst	r28, 1
     78e:	44 27       	eor	r20, r20
     790:	40 f9       	bld	r20, 0
     792:	65 e0       	ldi	r22, 0x05	; 5
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     79a:	4c 2f       	mov	r20, r28
     79c:	41 70       	andi	r20, 0x01	; 1
     79e:	66 e0       	ldi	r22, 0x06	; 6
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	62 e0       	ldi	r22, 0x02	; 2
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     7b0:	8f e1       	ldi	r24, 0x1F	; 31
     7b2:	9e e4       	ldi	r25, 0x4E	; 78
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <LCD_enuSendCommand+0x134>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <LCD_enuSendCommand+0x13a>
     7ba:	00 00       	nop
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	62 e0       	ldi	r22, 0x02	; 2
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     7c6:	8f e1       	ldi	r24, 0x1F	; 31
     7c8:	9e e4       	ldi	r25, 0x4E	; 78
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <LCD_enuSendCommand+0x14a>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <LCD_enuSendCommand+0x150>
     7d0:	00 00       	nop
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	08 95       	ret

000007e0 <LCD_enuDisplayChar>:
     7e0:	cf 93       	push	r28
     7e2:	c8 2f       	mov	r28, r24
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     802:	4c 2f       	mov	r20, r28
     804:	44 1f       	adc	r20, r20
     806:	44 27       	eor	r20, r20
     808:	44 1f       	adc	r20, r20
     80a:	63 e0       	ldi	r22, 0x03	; 3
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     812:	c6 fb       	bst	r28, 6
     814:	44 27       	eor	r20, r20
     816:	40 f9       	bld	r20, 0
     818:	64 e0       	ldi	r22, 0x04	; 4
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     820:	c5 fb       	bst	r28, 5
     822:	44 27       	eor	r20, r20
     824:	40 f9       	bld	r20, 0
     826:	65 e0       	ldi	r22, 0x05	; 5
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     82e:	c4 fb       	bst	r28, 4
     830:	44 27       	eor	r20, r20
     832:	40 f9       	bld	r20, 0
     834:	66 e0       	ldi	r22, 0x06	; 6
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	62 e0       	ldi	r22, 0x02	; 2
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     846:	8f e1       	ldi	r24, 0x1F	; 31
     848:	9e e4       	ldi	r25, 0x4E	; 78
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     850:	00 00       	nop
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	62 e0       	ldi	r22, 0x02	; 2
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     85c:	ef e1       	ldi	r30, 0x1F	; 31
     85e:	fe e4       	ldi	r31, 0x4E	; 78
     860:	31 97       	sbiw	r30, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <__stack+0x1>
     864:	00 c0       	rjmp	.+0      	; 0x866 <__stack+0x7>
     866:	00 00       	nop
     868:	c3 fb       	bst	r28, 3
     86a:	44 27       	eor	r20, r20
     86c:	40 f9       	bld	r20, 0
     86e:	63 e0       	ldi	r22, 0x03	; 3
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     876:	c2 fb       	bst	r28, 2
     878:	44 27       	eor	r20, r20
     87a:	40 f9       	bld	r20, 0
     87c:	64 e0       	ldi	r22, 0x04	; 4
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     884:	c1 fb       	bst	r28, 1
     886:	44 27       	eor	r20, r20
     888:	40 f9       	bld	r20, 0
     88a:	65 e0       	ldi	r22, 0x05	; 5
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     892:	4c 2f       	mov	r20, r28
     894:	41 70       	andi	r20, 0x01	; 1
     896:	66 e0       	ldi	r22, 0x06	; 6
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     89e:	41 e0       	ldi	r20, 0x01	; 1
     8a0:	62 e0       	ldi	r22, 0x02	; 2
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     8a8:	8f e1       	ldi	r24, 0x1F	; 31
     8aa:	9e e4       	ldi	r25, 0x4E	; 78
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <__stack+0x4d>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <__stack+0x53>
     8b2:	00 00       	nop
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	62 e0       	ldi	r22, 0x02	; 2
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     8be:	ef e1       	ldi	r30, 0x1F	; 31
     8c0:	fe e4       	ldi	r31, 0x4E	; 78
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <__stack+0x63>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <__stack+0x69>
     8c8:	00 00       	nop
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <LCD_enuDisplayString>:
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	00 97       	sbiw	r24, 0x00	; 0
     8d8:	09 f0       	breq	.+2      	; 0x8dc <LCD_enuDisplayString+0xe>
     8da:	77 c0       	rjmp	.+238    	; 0x9ca <LCD_enuDisplayString+0xfc>
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	7e c0       	rjmp	.+252    	; 0x9dc <LCD_enuDisplayString+0x10e>
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	62 e0       	ldi	r22, 0x02	; 2
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     8fe:	4c 2f       	mov	r20, r28
     900:	44 1f       	adc	r20, r20
     902:	44 27       	eor	r20, r20
     904:	44 1f       	adc	r20, r20
     906:	63 e0       	ldi	r22, 0x03	; 3
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     90e:	c6 fb       	bst	r28, 6
     910:	44 27       	eor	r20, r20
     912:	40 f9       	bld	r20, 0
     914:	64 e0       	ldi	r22, 0x04	; 4
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     91c:	c5 fb       	bst	r28, 5
     91e:	44 27       	eor	r20, r20
     920:	40 f9       	bld	r20, 0
     922:	65 e0       	ldi	r22, 0x05	; 5
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     92a:	c4 fb       	bst	r28, 4
     92c:	44 27       	eor	r20, r20
     92e:	40 f9       	bld	r20, 0
     930:	66 e0       	ldi	r22, 0x06	; 6
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     938:	41 e0       	ldi	r20, 0x01	; 1
     93a:	62 e0       	ldi	r22, 0x02	; 2
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     942:	8f e1       	ldi	r24, 0x1F	; 31
     944:	9e e4       	ldi	r25, 0x4E	; 78
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <LCD_enuDisplayString+0x78>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <LCD_enuDisplayString+0x7e>
     94c:	00 00       	nop
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	62 e0       	ldi	r22, 0x02	; 2
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     958:	ef e1       	ldi	r30, 0x1F	; 31
     95a:	fe e4       	ldi	r31, 0x4E	; 78
     95c:	31 97       	sbiw	r30, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <LCD_enuDisplayString+0x8e>
     960:	00 c0       	rjmp	.+0      	; 0x962 <LCD_enuDisplayString+0x94>
     962:	00 00       	nop
     964:	c3 fb       	bst	r28, 3
     966:	44 27       	eor	r20, r20
     968:	40 f9       	bld	r20, 0
     96a:	63 e0       	ldi	r22, 0x03	; 3
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     972:	c2 fb       	bst	r28, 2
     974:	44 27       	eor	r20, r20
     976:	40 f9       	bld	r20, 0
     978:	64 e0       	ldi	r22, 0x04	; 4
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     980:	c1 fb       	bst	r28, 1
     982:	44 27       	eor	r20, r20
     984:	40 f9       	bld	r20, 0
     986:	65 e0       	ldi	r22, 0x05	; 5
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     98e:	4c 2f       	mov	r20, r28
     990:	41 70       	andi	r20, 0x01	; 1
     992:	66 e0       	ldi	r22, 0x06	; 6
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     99a:	41 e0       	ldi	r20, 0x01	; 1
     99c:	62 e0       	ldi	r22, 0x02	; 2
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     9a4:	8f e1       	ldi	r24, 0x1F	; 31
     9a6:	9e e4       	ldi	r25, 0x4E	; 78
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <LCD_enuDisplayString+0xda>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <LCD_enuDisplayString+0xe0>
     9ae:	00 00       	nop
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	62 e0       	ldi	r22, 0x02	; 2
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     9ba:	ef e1       	ldi	r30, 0x1F	; 31
     9bc:	fe e4       	ldi	r31, 0x4E	; 78
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <LCD_enuDisplayString+0xf0>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <LCD_enuDisplayString+0xf6>
     9c4:	00 00       	nop
     9c6:	df 5f       	subi	r29, 0xFF	; 255
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <LCD_enuDisplayString+0x102>
     9ca:	8c 01       	movw	r16, r24
     9cc:	d0 e0       	ldi	r29, 0x00	; 0
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	f8 01       	movw	r30, r16
     9d2:	ed 0f       	add	r30, r29
     9d4:	f1 1d       	adc	r31, r1
     9d6:	c0 81       	ld	r28, Z
     9d8:	c1 11       	cpse	r28, r1
     9da:	82 cf       	rjmp	.-252    	; 0x8e0 <LCD_enuDisplayString+0x12>
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <LCD_enuDisplayFloat>:

ErrorStates_t LCD_enuDisplayFloat(f64_t Copy_f64_tData){
     9e6:	2f 92       	push	r2
     9e8:	3f 92       	push	r3
     9ea:	4f 92       	push	r4
     9ec:	5f 92       	push	r5
     9ee:	6f 92       	push	r6
     9f0:	7f 92       	push	r7
     9f2:	8f 92       	push	r8
     9f4:	9f 92       	push	r9
     9f6:	af 92       	push	r10
     9f8:	bf 92       	push	r11
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	65 97       	sbiw	r28, 0x15	; 21
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
     a1a:	2b 01       	movw	r4, r22
     a1c:	3c 01       	movw	r6, r24
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	sint64 Local_uint64_tRealNum;
	f64_t	Local_f64_tFraction;
	if(Copy_f64_tData < 0){
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	a9 01       	movw	r20, r18
     a24:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__cmpsf2>
     a28:	88 23       	and	r24, r24
     a2a:	0c f0       	brlt	.+2      	; 0xa2e <LCD_enuDisplayFloat+0x48>
     a2c:	67 c0       	rjmp	.+206    	; 0xafc <LCD_enuDisplayFloat+0x116>
	return Local_enuErrorStates;
}

static inline ErrorStates_t LCD_enuSendData(uint8 Copy_uint8Data){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	Local_enuErrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN, HIGH);
     a2e:	41 e0       	ldi	r20, 0x01	; 1
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(RW_PORT, RW_PIN, LOW);
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	62 e0       	ldi	r22, 0x02	; 2
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>

	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 7));
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	63 e0       	ldi	r22, 0x03	; 3
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 6));
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	64 e0       	ldi	r22, 0x04	; 4
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 5));
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	65 e0       	ldi	r22, 0x05	; 5
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 4));
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	66 e0       	ldi	r22, 0x06	; 6
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D3_PORT, D3_PIN, BIT_MASK & (Copy_uint8Data >> 3));
	Local_enuErrorStates = DIO_enuSetPinValue(D2_PORT, D2_PIN, BIT_MASK & (Copy_uint8Data >> 2));
	Local_enuErrorStates = DIO_enuSetPinValue(D1_PORT, D1_PIN, BIT_MASK & (Copy_uint8Data >> 1));
	Local_enuErrorStates = DIO_enuSetPinValue(D0_PORT, D0_PIN, BIT_MASK & (Copy_uint8Data >> 0));
#elif LCD_BIT_MODE == FOUR_BIT_MODE
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     a7e:	8f e1       	ldi	r24, 0x1F	; 31
     a80:	9e e4       	ldi	r25, 0x4E	; 78
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	f1 f7       	brne	.-4      	; 0xa82 <LCD_enuDisplayFloat+0x9c>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <LCD_enuDisplayFloat+0xa2>
     a88:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	62 e0       	ldi	r22, 0x02	; 2
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     a94:	8f e1       	ldi	r24, 0x1F	; 31
     a96:	9e e4       	ldi	r25, 0x4E	; 78
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <LCD_enuDisplayFloat+0xb2>
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <LCD_enuDisplayFloat+0xb8>
     a9e:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 3));
     aa0:	41 e0       	ldi	r20, 0x01	; 1
     aa2:	63 e0       	ldi	r22, 0x03	; 3
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 2));
     aaa:	41 e0       	ldi	r20, 0x01	; 1
     aac:	64 e0       	ldi	r22, 0x04	; 4
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 1));
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	65 e0       	ldi	r22, 0x05	; 5
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 0));
     abe:	41 e0       	ldi	r20, 0x01	; 1
     ac0:	66 e0       	ldi	r22, 0x06	; 6
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
#endif

	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
     ac8:	41 e0       	ldi	r20, 0x01	; 1
     aca:	62 e0       	ldi	r22, 0x02	; 2
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     ad2:	8f e1       	ldi	r24, 0x1F	; 31
     ad4:	9e e4       	ldi	r25, 0x4E	; 78
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <LCD_enuDisplayFloat+0xf0>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <LCD_enuDisplayFloat+0xf6>
     adc:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	62 e0       	ldi	r22, 0x02	; 2
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     ae8:	8f e1       	ldi	r24, 0x1F	; 31
     aea:	9e e4       	ldi	r25, 0x4E	; 78
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <LCD_enuDisplayFloat+0x106>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <LCD_enuDisplayFloat+0x10c>
     af2:	00 00       	nop
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	sint64 Local_uint64_tRealNum;
	f64_t	Local_f64_tFraction;
	if(Copy_f64_tData < 0){
		Local_enuErrorStates = LCD_enuSendData('-');
		Copy_f64_tData *= -1;
     af4:	77 fa       	bst	r7, 7
     af6:	70 94       	com	r7
     af8:	77 f8       	bld	r7, 7
     afa:	70 94       	com	r7
	}

	Local_uint64_tRealNum = (sint64) Copy_f64_tData;
     afc:	c3 01       	movw	r24, r6
     afe:	b2 01       	movw	r22, r4
     b00:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__fixsfdi>
     b04:	b2 2e       	mov	r11, r18
     b06:	c3 2e       	mov	r12, r19
     b08:	d4 2e       	mov	r13, r20
     b0a:	e5 2e       	mov	r14, r21
     b0c:	f6 2e       	mov	r15, r22
     b0e:	07 2f       	mov	r16, r23
     b10:	18 2f       	mov	r17, r24
     b12:	98 87       	std	Y+8, r25	; 0x08
     b14:	29 83       	std	Y+1, r18	; 0x01
     b16:	3a 83       	std	Y+2, r19	; 0x02
     b18:	4b 83       	std	Y+3, r20	; 0x03
     b1a:	5c 83       	std	Y+4, r21	; 0x04
     b1c:	6d 83       	std	Y+5, r22	; 0x05
     b1e:	7e 83       	std	Y+6, r23	; 0x06
     b20:	8f 83       	std	Y+7, r24	; 0x07
     b22:	9c 8b       	std	Y+20, r25	; 0x14
	Local_f64_tFraction = Copy_f64_tData - Local_uint64_tRealNum;
     b24:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__floatdisf>
     b28:	9b 01       	movw	r18, r22
     b2a:	ac 01       	movw	r20, r24
     b2c:	c3 01       	movw	r24, r6
     b2e:	b2 01       	movw	r22, r4
     b30:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__subsf3>
     b34:	68 8b       	std	Y+16, r22	; 0x10
     b36:	79 8b       	std	Y+17, r23	; 0x11
     b38:	8a 8b       	std	Y+18, r24	; 0x12
     b3a:	9b 8b       	std	Y+19, r25	; 0x13
	ErrorStates_t Local_enuErrorStates = ES_NOK;

	uint8 Local_uint8Digits = 1;
	sint64 Local_uint8Dividor = 10;

	if(Copy_uint32Data < 0){
     b3c:	2b 2d       	mov	r18, r11
     b3e:	3c 2d       	mov	r19, r12
     b40:	4d 2d       	mov	r20, r13
     b42:	5e 2d       	mov	r21, r14
     b44:	6f 2d       	mov	r22, r15
     b46:	70 2f       	mov	r23, r16
     b48:	81 2f       	mov	r24, r17
     b4a:	98 85       	ldd	r25, Y+8	; 0x08
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	0e 94 57 10 	call	0x20ae	; 0x20ae <__cmpdi2_s8>
     b52:	0c f0       	brlt	.+2      	; 0xb56 <LCD_enuDisplayFloat+0x170>
     b54:	75 c0       	rjmp	.+234    	; 0xc40 <LCD_enuDisplayFloat+0x25a>
	return Local_enuErrorStates;
}

static inline ErrorStates_t LCD_enuSendData(uint8 Copy_uint8Data){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	Local_enuErrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN, HIGH);
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(RW_PORT, RW_PIN, LOW);
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	62 e0       	ldi	r22, 0x02	; 2
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>

	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 7));
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	63 e0       	ldi	r22, 0x03	; 3
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 6));
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	64 e0       	ldi	r22, 0x04	; 4
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 5));
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	65 e0       	ldi	r22, 0x05	; 5
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 4));
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	66 e0       	ldi	r22, 0x06	; 6
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D3_PORT, D3_PIN, BIT_MASK & (Copy_uint8Data >> 3));
	Local_enuErrorStates = DIO_enuSetPinValue(D2_PORT, D2_PIN, BIT_MASK & (Copy_uint8Data >> 2));
	Local_enuErrorStates = DIO_enuSetPinValue(D1_PORT, D1_PIN, BIT_MASK & (Copy_uint8Data >> 1));
	Local_enuErrorStates = DIO_enuSetPinValue(D0_PORT, D0_PIN, BIT_MASK & (Copy_uint8Data >> 0));
#elif LCD_BIT_MODE == FOUR_BIT_MODE
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
     b9c:	41 e0       	ldi	r20, 0x01	; 1
     b9e:	62 e0       	ldi	r22, 0x02	; 2
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     ba6:	8f e1       	ldi	r24, 0x1F	; 31
     ba8:	9e e4       	ldi	r25, 0x4E	; 78
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <LCD_enuDisplayFloat+0x1c4>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <LCD_enuDisplayFloat+0x1ca>
     bb0:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	62 e0       	ldi	r22, 0x02	; 2
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     bbc:	8f e1       	ldi	r24, 0x1F	; 31
     bbe:	9e e4       	ldi	r25, 0x4E	; 78
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <LCD_enuDisplayFloat+0x1da>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <LCD_enuDisplayFloat+0x1e0>
     bc6:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 3));
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	63 e0       	ldi	r22, 0x03	; 3
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 2));
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	64 e0       	ldi	r22, 0x04	; 4
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 1));
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	65 e0       	ldi	r22, 0x05	; 5
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 0));
     be6:	41 e0       	ldi	r20, 0x01	; 1
     be8:	66 e0       	ldi	r22, 0x06	; 6
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
#endif

	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	62 e0       	ldi	r22, 0x02	; 2
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     bfa:	8f e1       	ldi	r24, 0x1F	; 31
     bfc:	9e e4       	ldi	r25, 0x4E	; 78
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <LCD_enuDisplayFloat+0x218>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <LCD_enuDisplayFloat+0x21e>
     c04:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	62 e0       	ldi	r22, 0x02	; 2
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     c10:	8f e1       	ldi	r24, 0x1F	; 31
     c12:	9e e4       	ldi	r25, 0x4E	; 78
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <LCD_enuDisplayFloat+0x22e>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <LCD_enuDisplayFloat+0x234>
     c1a:	00 00       	nop
	uint8 Local_uint8Digits = 1;
	sint64 Local_uint8Dividor = 10;

	if(Copy_uint32Data < 0){
		Local_enuErrorStates = LCD_enuSendData('-');
		Copy_uint32Data *= -1;
     c1c:	2b 2d       	mov	r18, r11
     c1e:	3c 2d       	mov	r19, r12
     c20:	4d 2d       	mov	r20, r13
     c22:	5e 2d       	mov	r21, r14
     c24:	6f 2d       	mov	r22, r15
     c26:	70 2f       	mov	r23, r16
     c28:	81 2f       	mov	r24, r17
     c2a:	98 85       	ldd	r25, Y+8	; 0x08
     c2c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__negdi2>
     c30:	29 83       	std	Y+1, r18	; 0x01
     c32:	3a 83       	std	Y+2, r19	; 0x02
     c34:	4b 83       	std	Y+3, r20	; 0x03
     c36:	5c 83       	std	Y+4, r21	; 0x04
     c38:	6d 83       	std	Y+5, r22	; 0x05
     c3a:	7e 83       	std	Y+6, r23	; 0x06
     c3c:	8f 83       	std	Y+7, r24	; 0x07
     c3e:	9c 8b       	std	Y+20, r25	; 0x14
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	Local_enuErrorStates = LCD_enuDisplayNumber(Copy_uint32Data);
	return Local_enuErrorStates;
}

ErrorStates_t LCD_enuDisplayFloat(f64_t Copy_f64_tData){
     c40:	0f 2e       	mov	r0, r31
     c42:	fa e0       	ldi	r31, 0x0A	; 10
     c44:	2f 2e       	mov	r2, r31
     c46:	f0 2d       	mov	r31, r0
     c48:	91 2c       	mov	r9, r1
     c4a:	81 2c       	mov	r8, r1
     c4c:	71 2c       	mov	r7, r1
     c4e:	61 2c       	mov	r6, r1
     c50:	51 2c       	mov	r5, r1
     c52:	41 2c       	mov	r4, r1
     c54:	31 2c       	mov	r3, r1
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	98 87       	std	Y+8, r25	; 0x08
     c5a:	33 c0       	rjmp	.+102    	; 0xcc2 <LCD_enuDisplayFloat+0x2dc>
		Local_enuErrorStates = LCD_enuSendData('-');
		Copy_uint32Data *= -1;
	}

	while(Copy_uint32Data / Local_uint8Dividor){
		Local_uint8Dividor *= 10;
     c5c:	22 2d       	mov	r18, r2
     c5e:	39 2d       	mov	r19, r9
     c60:	48 2d       	mov	r20, r8
     c62:	57 2d       	mov	r21, r7
     c64:	66 2d       	mov	r22, r6
     c66:	75 2d       	mov	r23, r5
     c68:	84 2d       	mov	r24, r4
     c6a:	93 2d       	mov	r25, r3
     c6c:	01 e0       	ldi	r16, 0x01	; 1
     c6e:	0e 94 35 10 	call	0x206a	; 0x206a <__ashldi3>
     c72:	62 2e       	mov	r6, r18
     c74:	73 2e       	mov	r7, r19
     c76:	84 2e       	mov	r8, r20
     c78:	95 2e       	mov	r9, r21
     c7a:	b6 2f       	mov	r27, r22
     c7c:	a7 2f       	mov	r26, r23
     c7e:	f8 2f       	mov	r31, r24
     c80:	e9 2f       	mov	r30, r25
     c82:	02 e0       	ldi	r16, 0x02	; 2
     c84:	0e 94 35 10 	call	0x206a	; 0x206a <__ashldi3>
     c88:	a2 2e       	mov	r10, r18
     c8a:	b3 2e       	mov	r11, r19
     c8c:	c4 2e       	mov	r12, r20
     c8e:	d5 2e       	mov	r13, r21
     c90:	e6 2e       	mov	r14, r22
     c92:	f7 2e       	mov	r15, r23
     c94:	08 2f       	mov	r16, r24
     c96:	19 2f       	mov	r17, r25
     c98:	26 2d       	mov	r18, r6
     c9a:	37 2d       	mov	r19, r7
     c9c:	48 2d       	mov	r20, r8
     c9e:	59 2d       	mov	r21, r9
     ca0:	6b 2f       	mov	r22, r27
     ca2:	7a 2f       	mov	r23, r26
     ca4:	8f 2f       	mov	r24, r31
     ca6:	9e 2f       	mov	r25, r30
     ca8:	0e 94 4e 10 	call	0x209c	; 0x209c <__adddi3>
     cac:	22 2e       	mov	r2, r18
     cae:	93 2e       	mov	r9, r19
     cb0:	84 2e       	mov	r8, r20
     cb2:	75 2e       	mov	r7, r21
     cb4:	66 2e       	mov	r6, r22
     cb6:	57 2e       	mov	r5, r23
     cb8:	48 2e       	mov	r4, r24
     cba:	39 2e       	mov	r3, r25
		++Local_uint8Digits;
     cbc:	88 85       	ldd	r24, Y+8	; 0x08
     cbe:	8f 5f       	subi	r24, 0xFF	; 255
     cc0:	88 87       	std	Y+8, r24	; 0x08
	if(Copy_uint32Data < 0){
		Local_enuErrorStates = LCD_enuSendData('-');
		Copy_uint32Data *= -1;
	}

	while(Copy_uint32Data / Local_uint8Dividor){
     cc2:	a2 2c       	mov	r10, r2
     cc4:	b9 2c       	mov	r11, r9
     cc6:	c8 2c       	mov	r12, r8
     cc8:	d7 2c       	mov	r13, r7
     cca:	e6 2c       	mov	r14, r6
     ccc:	f5 2c       	mov	r15, r5
     cce:	04 2d       	mov	r16, r4
     cd0:	13 2d       	mov	r17, r3
     cd2:	29 81       	ldd	r18, Y+1	; 0x01
     cd4:	3a 81       	ldd	r19, Y+2	; 0x02
     cd6:	4b 81       	ldd	r20, Y+3	; 0x03
     cd8:	5c 81       	ldd	r21, Y+4	; 0x04
     cda:	6d 81       	ldd	r22, Y+5	; 0x05
     cdc:	7e 81       	ldd	r23, Y+6	; 0x06
     cde:	8f 81       	ldd	r24, Y+7	; 0x07
     ce0:	9c 89       	ldd	r25, Y+20	; 0x14
     ce2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__divdi3>
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	0e 94 57 10 	call	0x20ae	; 0x20ae <__cmpdi2_s8>
     cec:	09 f0       	breq	.+2      	; 0xcf0 <LCD_enuDisplayFloat+0x30a>
     cee:	b6 cf       	rjmp	.-148    	; 0xc5c <LCD_enuDisplayFloat+0x276>
     cf0:	98 85       	ldd	r25, Y+8	; 0x08
     cf2:	9d 8b       	std	Y+21, r25	; 0x15
     cf4:	28 86       	std	Y+8, r2	; 0x08
     cf6:	99 86       	std	Y+9, r9	; 0x09
     cf8:	8a 86       	std	Y+10, r8	; 0x0a
     cfa:	7b 86       	std	Y+11, r7	; 0x0b
     cfc:	6c 86       	std	Y+12, r6	; 0x0c
     cfe:	5d 86       	std	Y+13, r5	; 0x0d
     d00:	4e 86       	std	Y+14, r4	; 0x0e
     d02:	3f 86       	std	Y+15, r3	; 0x0f
     d04:	b9 c0       	rjmp	.+370    	; 0xe78 <LCD_enuDisplayFloat+0x492>
		Local_uint8Dividor *= 10;
		++Local_uint8Digits;
	}

	while(Local_uint8Digits--){
		Local_uint8Dividor /= 10;
     d06:	0f 2e       	mov	r0, r31
     d08:	fa e0       	ldi	r31, 0x0A	; 10
     d0a:	af 2e       	mov	r10, r31
     d0c:	f0 2d       	mov	r31, r0
     d0e:	b1 2c       	mov	r11, r1
     d10:	c1 2c       	mov	r12, r1
     d12:	d1 2c       	mov	r13, r1
     d14:	e1 2c       	mov	r14, r1
     d16:	f1 2c       	mov	r15, r1
     d18:	00 e0       	ldi	r16, 0x00	; 0
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	28 85       	ldd	r18, Y+8	; 0x08
     d1e:	39 85       	ldd	r19, Y+9	; 0x09
     d20:	4a 85       	ldd	r20, Y+10	; 0x0a
     d22:	5b 85       	ldd	r21, Y+11	; 0x0b
     d24:	6c 85       	ldd	r22, Y+12	; 0x0c
     d26:	7d 85       	ldd	r23, Y+13	; 0x0d
     d28:	8e 85       	ldd	r24, Y+14	; 0x0e
     d2a:	9f 85       	ldd	r25, Y+15	; 0x0f
     d2c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__divdi3>
     d30:	9d 8b       	std	Y+21, r25	; 0x15
     d32:	28 87       	std	Y+8, r18	; 0x08
     d34:	39 87       	std	Y+9, r19	; 0x09
     d36:	4a 87       	std	Y+10, r20	; 0x0a
     d38:	5b 87       	std	Y+11, r21	; 0x0b
     d3a:	6c 87       	std	Y+12, r22	; 0x0c
     d3c:	7d 87       	std	Y+13, r23	; 0x0d
     d3e:	8e 87       	std	Y+14, r24	; 0x0e
     d40:	9f 87       	std	Y+15, r25	; 0x0f
		Local_enuErrorStates = LCD_enuSendData('0' + (Copy_uint32Data / Local_uint8Dividor));
     d42:	a2 2e       	mov	r10, r18
     d44:	b3 2e       	mov	r11, r19
     d46:	c4 2e       	mov	r12, r20
     d48:	d5 2e       	mov	r13, r21
     d4a:	e6 2e       	mov	r14, r22
     d4c:	f7 2e       	mov	r15, r23
     d4e:	08 2f       	mov	r16, r24
     d50:	19 2f       	mov	r17, r25
     d52:	29 81       	ldd	r18, Y+1	; 0x01
     d54:	3a 81       	ldd	r19, Y+2	; 0x02
     d56:	4b 81       	ldd	r20, Y+3	; 0x03
     d58:	5c 81       	ldd	r21, Y+4	; 0x04
     d5a:	6d 81       	ldd	r22, Y+5	; 0x05
     d5c:	7e 81       	ldd	r23, Y+6	; 0x06
     d5e:	8f 81       	ldd	r24, Y+7	; 0x07
     d60:	9c 89       	ldd	r25, Y+20	; 0x14
     d62:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__divdi3>
     d66:	10 e3       	ldi	r17, 0x30	; 48
     d68:	12 0f       	add	r17, r18
	return Local_enuErrorStates;
}

static inline ErrorStates_t LCD_enuSendData(uint8 Copy_uint8Data){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	Local_enuErrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN, HIGH);
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(RW_PORT, RW_PIN, LOW);
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	62 e0       	ldi	r22, 0x02	; 2
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>

	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 7));
     d88:	41 2f       	mov	r20, r17
     d8a:	44 1f       	adc	r20, r20
     d8c:	44 27       	eor	r20, r20
     d8e:	44 1f       	adc	r20, r20
     d90:	63 e0       	ldi	r22, 0x03	; 3
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 6));
     d98:	16 fb       	bst	r17, 6
     d9a:	44 27       	eor	r20, r20
     d9c:	40 f9       	bld	r20, 0
     d9e:	64 e0       	ldi	r22, 0x04	; 4
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 5));
     da6:	15 fb       	bst	r17, 5
     da8:	44 27       	eor	r20, r20
     daa:	40 f9       	bld	r20, 0
     dac:	65 e0       	ldi	r22, 0x05	; 5
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 4));
     db4:	14 fb       	bst	r17, 4
     db6:	44 27       	eor	r20, r20
     db8:	40 f9       	bld	r20, 0
     dba:	66 e0       	ldi	r22, 0x06	; 6
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D3_PORT, D3_PIN, BIT_MASK & (Copy_uint8Data >> 3));
	Local_enuErrorStates = DIO_enuSetPinValue(D2_PORT, D2_PIN, BIT_MASK & (Copy_uint8Data >> 2));
	Local_enuErrorStates = DIO_enuSetPinValue(D1_PORT, D1_PIN, BIT_MASK & (Copy_uint8Data >> 1));
	Local_enuErrorStates = DIO_enuSetPinValue(D0_PORT, D0_PIN, BIT_MASK & (Copy_uint8Data >> 0));
#elif LCD_BIT_MODE == FOUR_BIT_MODE
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     dcc:	8f e1       	ldi	r24, 0x1F	; 31
     dce:	9e e4       	ldi	r25, 0x4E	; 78
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <LCD_enuDisplayFloat+0x3ea>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <LCD_enuDisplayFloat+0x3f0>
     dd6:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	62 e0       	ldi	r22, 0x02	; 2
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     de2:	8f e1       	ldi	r24, 0x1F	; 31
     de4:	9e e4       	ldi	r25, 0x4E	; 78
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <LCD_enuDisplayFloat+0x400>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <LCD_enuDisplayFloat+0x406>
     dec:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 3));
     dee:	13 fb       	bst	r17, 3
     df0:	44 27       	eor	r20, r20
     df2:	40 f9       	bld	r20, 0
     df4:	63 e0       	ldi	r22, 0x03	; 3
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 2));
     dfc:	12 fb       	bst	r17, 2
     dfe:	44 27       	eor	r20, r20
     e00:	40 f9       	bld	r20, 0
     e02:	64 e0       	ldi	r22, 0x04	; 4
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 1));
     e0a:	11 fb       	bst	r17, 1
     e0c:	44 27       	eor	r20, r20
     e0e:	40 f9       	bld	r20, 0
     e10:	65 e0       	ldi	r22, 0x05	; 5
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 0));
     e18:	41 2f       	mov	r20, r17
     e1a:	41 70       	andi	r20, 0x01	; 1
     e1c:	66 e0       	ldi	r22, 0x06	; 6
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
#endif

	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	62 e0       	ldi	r22, 0x02	; 2
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     e2e:	8f e1       	ldi	r24, 0x1F	; 31
     e30:	9e e4       	ldi	r25, 0x4E	; 78
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <LCD_enuDisplayFloat+0x44c>
     e36:	00 c0       	rjmp	.+0      	; 0xe38 <LCD_enuDisplayFloat+0x452>
     e38:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     e44:	8f e1       	ldi	r24, 0x1F	; 31
     e46:	9e e4       	ldi	r25, 0x4E	; 78
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <LCD_enuDisplayFloat+0x462>
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <LCD_enuDisplayFloat+0x468>
     e4e:	00 00       	nop
	}

	while(Local_uint8Digits--){
		Local_uint8Dividor /= 10;
		Local_enuErrorStates = LCD_enuSendData('0' + (Copy_uint32Data / Local_uint8Dividor));
		Copy_uint32Data -= ((Copy_uint32Data / Local_uint8Dividor) * Local_uint8Dividor);
     e50:	1d 89       	ldd	r17, Y+21	; 0x15
     e52:	29 81       	ldd	r18, Y+1	; 0x01
     e54:	3a 81       	ldd	r19, Y+2	; 0x02
     e56:	4b 81       	ldd	r20, Y+3	; 0x03
     e58:	5c 81       	ldd	r21, Y+4	; 0x04
     e5a:	6d 81       	ldd	r22, Y+5	; 0x05
     e5c:	7e 81       	ldd	r23, Y+6	; 0x06
     e5e:	8f 81       	ldd	r24, Y+7	; 0x07
     e60:	9c 89       	ldd	r25, Y+20	; 0x14
     e62:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__moddi3>
     e66:	29 83       	std	Y+1, r18	; 0x01
     e68:	3a 83       	std	Y+2, r19	; 0x02
     e6a:	4b 83       	std	Y+3, r20	; 0x03
     e6c:	5c 83       	std	Y+4, r21	; 0x04
     e6e:	6d 83       	std	Y+5, r22	; 0x05
     e70:	7e 83       	std	Y+6, r23	; 0x06
     e72:	8f 83       	std	Y+7, r24	; 0x07
     e74:	9c 8b       	std	Y+20, r25	; 0x14
	while(Copy_uint32Data / Local_uint8Dividor){
		Local_uint8Dividor *= 10;
		++Local_uint8Digits;
	}

	while(Local_uint8Digits--){
     e76:	2d 8a       	std	Y+21, r2	; 0x15
     e78:	2d 88       	ldd	r2, Y+21	; 0x15
     e7a:	2a 94       	dec	r2
     e7c:	9d 89       	ldd	r25, Y+21	; 0x15
     e7e:	91 11       	cpse	r25, r1
     e80:	42 cf       	rjmp	.-380    	; 0xd06 <LCD_enuDisplayFloat+0x320>
	return Local_enuErrorStates;
}

static inline ErrorStates_t LCD_enuSendData(uint8 Copy_uint8Data){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	Local_enuErrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN, HIGH);
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(RW_PORT, RW_PIN, LOW);
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     e96:	40 e0       	ldi	r20, 0x00	; 0
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>

	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 7));
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	63 e0       	ldi	r22, 0x03	; 3
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 6));
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	64 e0       	ldi	r22, 0x04	; 4
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 5));
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	65 e0       	ldi	r22, 0x05	; 5
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 4));
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	66 e0       	ldi	r22, 0x06	; 6
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D3_PORT, D3_PIN, BIT_MASK & (Copy_uint8Data >> 3));
	Local_enuErrorStates = DIO_enuSetPinValue(D2_PORT, D2_PIN, BIT_MASK & (Copy_uint8Data >> 2));
	Local_enuErrorStates = DIO_enuSetPinValue(D1_PORT, D1_PIN, BIT_MASK & (Copy_uint8Data >> 1));
	Local_enuErrorStates = DIO_enuSetPinValue(D0_PORT, D0_PIN, BIT_MASK & (Copy_uint8Data >> 0));
#elif LCD_BIT_MODE == FOUR_BIT_MODE
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	62 e0       	ldi	r22, 0x02	; 2
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     ed2:	8f e1       	ldi	r24, 0x1F	; 31
     ed4:	9e e4       	ldi	r25, 0x4E	; 78
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <LCD_enuDisplayFloat+0x4f0>
     eda:	00 c0       	rjmp	.+0      	; 0xedc <LCD_enuDisplayFloat+0x4f6>
     edc:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	62 e0       	ldi	r22, 0x02	; 2
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     ee8:	8f e1       	ldi	r24, 0x1F	; 31
     eea:	9e e4       	ldi	r25, 0x4E	; 78
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <LCD_enuDisplayFloat+0x506>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <LCD_enuDisplayFloat+0x50c>
     ef2:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 3));
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	63 e0       	ldi	r22, 0x03	; 3
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 2));
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	64 e0       	ldi	r22, 0x04	; 4
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 1));
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	65 e0       	ldi	r22, 0x05	; 5
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 0));
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	66 e0       	ldi	r22, 0x06	; 6
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
#endif

	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	62 e0       	ldi	r22, 0x02	; 2
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     f26:	8f e1       	ldi	r24, 0x1F	; 31
     f28:	9e e4       	ldi	r25, 0x4E	; 78
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <LCD_enuDisplayFloat+0x544>
     f2e:	00 c0       	rjmp	.+0      	; 0xf30 <LCD_enuDisplayFloat+0x54a>
     f30:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	62 e0       	ldi	r22, 0x02	; 2
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     f3c:	8f e1       	ldi	r24, 0x1F	; 31
     f3e:	9e e4       	ldi	r25, 0x4E	; 78
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <LCD_enuDisplayFloat+0x55a>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <LCD_enuDisplayFloat+0x560>
     f46:	00 00       	nop

	Local_enuErrorStates = LCD_enuDisplayNumber(Local_uint64_tRealNum);
	Local_enuErrorStates = LCD_enuSendData('.');

	uint8 Local_uint8Iterator;
	for(Local_uint8Iterator = 0; Local_uint8Iterator < FRACTION_MAX_RANGE; Local_uint8Iterator++)
     f48:	19 82       	std	Y+1, r1	; 0x01
     f4a:	68 89       	ldd	r22, Y+16	; 0x10
     f4c:	79 89       	ldd	r23, Y+17	; 0x11
     f4e:	8a 89       	ldd	r24, Y+18	; 0x12
     f50:	9b 89       	ldd	r25, Y+19	; 0x13
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <LCD_enuDisplayFloat+0x580>
		Local_f64_tFraction *= 10;
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	51 e4       	ldi	r21, 0x41	; 65
     f5c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__mulsf3>

	Local_enuErrorStates = LCD_enuDisplayNumber(Local_uint64_tRealNum);
	Local_enuErrorStates = LCD_enuSendData('.');

	uint8 Local_uint8Iterator;
	for(Local_uint8Iterator = 0; Local_uint8Iterator < FRACTION_MAX_RANGE; Local_uint8Iterator++)
     f60:	29 81       	ldd	r18, Y+1	; 0x01
     f62:	2f 5f       	subi	r18, 0xFF	; 255
     f64:	29 83       	std	Y+1, r18	; 0x01
     f66:	29 81       	ldd	r18, Y+1	; 0x01
     f68:	24 30       	cpi	r18, 0x04	; 4
     f6a:	a0 f3       	brcs	.-24     	; 0xf54 <LCD_enuDisplayFloat+0x56e>
     f6c:	68 8b       	std	Y+16, r22	; 0x10
     f6e:	79 8b       	std	Y+17, r23	; 0x11
     f70:	8a 8b       	std	Y+18, r24	; 0x12
     f72:	9b 8b       	std	Y+19, r25	; 0x13
		Local_f64_tFraction *= 10;

	Local_enuErrorStates = LCD_enuDisplayNumber(Local_f64_tFraction);
     f74:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__fixsfdi>
     f78:	c2 2e       	mov	r12, r18
     f7a:	d3 2e       	mov	r13, r19
     f7c:	e4 2e       	mov	r14, r20
     f7e:	f5 2e       	mov	r15, r21
     f80:	06 2f       	mov	r16, r22
     f82:	17 2f       	mov	r17, r23
     f84:	89 87       	std	Y+9, r24	; 0x09
     f86:	98 87       	std	Y+8, r25	; 0x08
     f88:	42 2e       	mov	r4, r18
     f8a:	39 83       	std	Y+1, r19	; 0x01
     f8c:	4a 83       	std	Y+2, r20	; 0x02
     f8e:	5b 83       	std	Y+3, r21	; 0x03
     f90:	6c 83       	std	Y+4, r22	; 0x04
     f92:	7d 83       	std	Y+5, r23	; 0x05
     f94:	8e 83       	std	Y+6, r24	; 0x06
     f96:	9f 83       	std	Y+7, r25	; 0x07
	ErrorStates_t Local_enuErrorStates = ES_NOK;

	uint8 Local_uint8Digits = 1;
	sint64 Local_uint8Dividor = 10;

	if(Copy_uint32Data < 0){
     f98:	a0 e0       	ldi	r26, 0x00	; 0
     f9a:	0e 94 57 10 	call	0x20ae	; 0x20ae <__cmpdi2_s8>
     f9e:	0c f0       	brlt	.+2      	; 0xfa2 <LCD_enuDisplayFloat+0x5bc>
     fa0:	77 c0       	rjmp	.+238    	; 0x1090 <LCD_enuDisplayFloat+0x6aa>
	return Local_enuErrorStates;
}

static inline ErrorStates_t LCD_enuSendData(uint8 Copy_uint8Data){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	Local_enuErrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN, HIGH);
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(RW_PORT, RW_PIN, LOW);
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	62 e0       	ldi	r22, 0x02	; 2
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>

	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 7));
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	63 e0       	ldi	r22, 0x03	; 3
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 6));
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	64 e0       	ldi	r22, 0x04	; 4
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 5));
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	65 e0       	ldi	r22, 0x05	; 5
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 4));
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	66 e0       	ldi	r22, 0x06	; 6
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D3_PORT, D3_PIN, BIT_MASK & (Copy_uint8Data >> 3));
	Local_enuErrorStates = DIO_enuSetPinValue(D2_PORT, D2_PIN, BIT_MASK & (Copy_uint8Data >> 2));
	Local_enuErrorStates = DIO_enuSetPinValue(D1_PORT, D1_PIN, BIT_MASK & (Copy_uint8Data >> 1));
	Local_enuErrorStates = DIO_enuSetPinValue(D0_PORT, D0_PIN, BIT_MASK & (Copy_uint8Data >> 0));
#elif LCD_BIT_MODE == FOUR_BIT_MODE
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	62 e0       	ldi	r22, 0x02	; 2
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
     ff2:	8f e1       	ldi	r24, 0x1F	; 31
     ff4:	9e e4       	ldi	r25, 0x4E	; 78
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <LCD_enuDisplayFloat+0x610>
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <LCD_enuDisplayFloat+0x616>
     ffc:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	62 e0       	ldi	r22, 0x02	; 2
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
    1008:	8f e1       	ldi	r24, 0x1F	; 31
    100a:	9e e4       	ldi	r25, 0x4E	; 78
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <LCD_enuDisplayFloat+0x626>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <LCD_enuDisplayFloat+0x62c>
    1012:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 3));
    1014:	41 e0       	ldi	r20, 0x01	; 1
    1016:	63 e0       	ldi	r22, 0x03	; 3
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 2));
    101e:	41 e0       	ldi	r20, 0x01	; 1
    1020:	64 e0       	ldi	r22, 0x04	; 4
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 1));
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	65 e0       	ldi	r22, 0x05	; 5
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 0));
    1032:	41 e0       	ldi	r20, 0x01	; 1
    1034:	66 e0       	ldi	r22, 0x06	; 6
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
#endif

	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    103c:	41 e0       	ldi	r20, 0x01	; 1
    103e:	62 e0       	ldi	r22, 0x02	; 2
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
    1046:	8f e1       	ldi	r24, 0x1F	; 31
    1048:	9e e4       	ldi	r25, 0x4E	; 78
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <LCD_enuDisplayFloat+0x664>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <LCD_enuDisplayFloat+0x66a>
    1050:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	62 e0       	ldi	r22, 0x02	; 2
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
    105c:	88 8b       	std	Y+16, r24	; 0x10
    105e:	8f e1       	ldi	r24, 0x1F	; 31
    1060:	9e e4       	ldi	r25, 0x4E	; 78
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <LCD_enuDisplayFloat+0x67c>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <LCD_enuDisplayFloat+0x682>
    1068:	00 00       	nop
	uint8 Local_uint8Digits = 1;
	sint64 Local_uint8Dividor = 10;

	if(Copy_uint32Data < 0){
		Local_enuErrorStates = LCD_enuSendData('-');
		Copy_uint32Data *= -1;
    106a:	2c 2d       	mov	r18, r12
    106c:	3d 2d       	mov	r19, r13
    106e:	4e 2d       	mov	r20, r14
    1070:	5f 2d       	mov	r21, r15
    1072:	60 2f       	mov	r22, r16
    1074:	71 2f       	mov	r23, r17
    1076:	89 85       	ldd	r24, Y+9	; 0x09
    1078:	98 85       	ldd	r25, Y+8	; 0x08
    107a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__negdi2>
    107e:	42 2e       	mov	r4, r18
    1080:	39 83       	std	Y+1, r19	; 0x01
    1082:	4a 83       	std	Y+2, r20	; 0x02
    1084:	5b 83       	std	Y+3, r21	; 0x03
    1086:	6c 83       	std	Y+4, r22	; 0x04
    1088:	7d 83       	std	Y+5, r23	; 0x05
    108a:	8e 83       	std	Y+6, r24	; 0x06
    108c:	9f 83       	std	Y+7, r25	; 0x07
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <LCD_enuDisplayFloat+0x6ae>

	return Local_enuErrorStates;
}

static inline ErrorStates_t LCD_enuDisplayNumber(sint64 Copy_uint32Data){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	98 8b       	std	Y+16, r25	; 0x10
    1094:	0f 2e       	mov	r0, r31
    1096:	fa e0       	ldi	r31, 0x0A	; 10
    1098:	2f 2e       	mov	r2, r31
    109a:	f0 2d       	mov	r31, r0
    109c:	31 2c       	mov	r3, r1
    109e:	1a 86       	std	Y+10, r1	; 0x0a
    10a0:	91 2c       	mov	r9, r1
    10a2:	81 2c       	mov	r8, r1
    10a4:	71 2c       	mov	r7, r1
    10a6:	61 2c       	mov	r6, r1
    10a8:	51 2c       	mov	r5, r1
    10aa:	21 e0       	ldi	r18, 0x01	; 1
    10ac:	28 87       	std	Y+8, r18	; 0x08
    10ae:	33 c0       	rjmp	.+102    	; 0x1116 <LCD_enuDisplayFloat+0x730>
		Local_enuErrorStates = LCD_enuSendData('-');
		Copy_uint32Data *= -1;
	}

	while(Copy_uint32Data / Local_uint8Dividor){
		Local_uint8Dividor *= 10;
    10b0:	22 2d       	mov	r18, r2
    10b2:	33 2d       	mov	r19, r3
    10b4:	4a 85       	ldd	r20, Y+10	; 0x0a
    10b6:	59 2d       	mov	r21, r9
    10b8:	68 2d       	mov	r22, r8
    10ba:	77 2d       	mov	r23, r7
    10bc:	86 2d       	mov	r24, r6
    10be:	95 2d       	mov	r25, r5
    10c0:	01 e0       	ldi	r16, 0x01	; 1
    10c2:	0e 94 35 10 	call	0x206a	; 0x206a <__ashldi3>
    10c6:	72 2e       	mov	r7, r18
    10c8:	83 2e       	mov	r8, r19
    10ca:	94 2e       	mov	r9, r20
    10cc:	59 87       	std	Y+9, r21	; 0x09
    10ce:	b6 2f       	mov	r27, r22
    10d0:	a7 2f       	mov	r26, r23
    10d2:	f8 2f       	mov	r31, r24
    10d4:	e9 2f       	mov	r30, r25
    10d6:	02 e0       	ldi	r16, 0x02	; 2
    10d8:	0e 94 35 10 	call	0x206a	; 0x206a <__ashldi3>
    10dc:	a2 2e       	mov	r10, r18
    10de:	b3 2e       	mov	r11, r19
    10e0:	c4 2e       	mov	r12, r20
    10e2:	d5 2e       	mov	r13, r21
    10e4:	e6 2e       	mov	r14, r22
    10e6:	f7 2e       	mov	r15, r23
    10e8:	08 2f       	mov	r16, r24
    10ea:	19 2f       	mov	r17, r25
    10ec:	27 2d       	mov	r18, r7
    10ee:	38 2d       	mov	r19, r8
    10f0:	49 2d       	mov	r20, r9
    10f2:	59 85       	ldd	r21, Y+9	; 0x09
    10f4:	6b 2f       	mov	r22, r27
    10f6:	7a 2f       	mov	r23, r26
    10f8:	8f 2f       	mov	r24, r31
    10fa:	9e 2f       	mov	r25, r30
    10fc:	0e 94 4e 10 	call	0x209c	; 0x209c <__adddi3>
    1100:	22 2e       	mov	r2, r18
    1102:	33 2e       	mov	r3, r19
    1104:	4a 87       	std	Y+10, r20	; 0x0a
    1106:	95 2e       	mov	r9, r21
    1108:	86 2e       	mov	r8, r22
    110a:	77 2e       	mov	r7, r23
    110c:	68 2e       	mov	r6, r24
    110e:	59 2e       	mov	r5, r25
		++Local_uint8Digits;
    1110:	98 85       	ldd	r25, Y+8	; 0x08
    1112:	9f 5f       	subi	r25, 0xFF	; 255
    1114:	98 87       	std	Y+8, r25	; 0x08
	if(Copy_uint32Data < 0){
		Local_enuErrorStates = LCD_enuSendData('-');
		Copy_uint32Data *= -1;
	}

	while(Copy_uint32Data / Local_uint8Dividor){
    1116:	a2 2c       	mov	r10, r2
    1118:	b3 2c       	mov	r11, r3
    111a:	ca 84       	ldd	r12, Y+10	; 0x0a
    111c:	d9 2c       	mov	r13, r9
    111e:	e8 2c       	mov	r14, r8
    1120:	f7 2c       	mov	r15, r7
    1122:	06 2d       	mov	r16, r6
    1124:	15 2d       	mov	r17, r5
    1126:	24 2d       	mov	r18, r4
    1128:	39 81       	ldd	r19, Y+1	; 0x01
    112a:	4a 81       	ldd	r20, Y+2	; 0x02
    112c:	5b 81       	ldd	r21, Y+3	; 0x03
    112e:	6c 81       	ldd	r22, Y+4	; 0x04
    1130:	7d 81       	ldd	r23, Y+5	; 0x05
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	9f 81       	ldd	r25, Y+7	; 0x07
    1136:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__divdi3>
    113a:	a0 e0       	ldi	r26, 0x00	; 0
    113c:	0e 94 57 10 	call	0x20ae	; 0x20ae <__cmpdi2_s8>
    1140:	09 f0       	breq	.+2      	; 0x1144 <LCD_enuDisplayFloat+0x75e>
    1142:	b6 cf       	rjmp	.-148    	; 0x10b0 <LCD_enuDisplayFloat+0x6ca>
    1144:	28 85       	ldd	r18, Y+8	; 0x08
    1146:	2c 8b       	std	Y+20, r18	; 0x14
    1148:	28 86       	std	Y+8, r2	; 0x08
    114a:	39 86       	std	Y+9, r3	; 0x09
    114c:	9b 86       	std	Y+11, r9	; 0x0b
    114e:	8c 86       	std	Y+12, r8	; 0x0c
    1150:	7d 86       	std	Y+13, r7	; 0x0d
    1152:	6e 86       	std	Y+14, r6	; 0x0e
    1154:	5f 86       	std	Y+15, r5	; 0x0f
    1156:	24 2c       	mov	r2, r4
    1158:	be c0       	rjmp	.+380    	; 0x12d6 <LCD_enuDisplayFloat+0x8f0>
		Local_uint8Dividor *= 10;
		++Local_uint8Digits;
	}

	while(Local_uint8Digits--){
		Local_uint8Dividor /= 10;
    115a:	0f 2e       	mov	r0, r31
    115c:	fa e0       	ldi	r31, 0x0A	; 10
    115e:	af 2e       	mov	r10, r31
    1160:	f0 2d       	mov	r31, r0
    1162:	b1 2c       	mov	r11, r1
    1164:	c1 2c       	mov	r12, r1
    1166:	d1 2c       	mov	r13, r1
    1168:	e1 2c       	mov	r14, r1
    116a:	f1 2c       	mov	r15, r1
    116c:	00 e0       	ldi	r16, 0x00	; 0
    116e:	10 e0       	ldi	r17, 0x00	; 0
    1170:	28 85       	ldd	r18, Y+8	; 0x08
    1172:	39 85       	ldd	r19, Y+9	; 0x09
    1174:	4a 85       	ldd	r20, Y+10	; 0x0a
    1176:	5b 85       	ldd	r21, Y+11	; 0x0b
    1178:	6c 85       	ldd	r22, Y+12	; 0x0c
    117a:	7d 85       	ldd	r23, Y+13	; 0x0d
    117c:	8e 85       	ldd	r24, Y+14	; 0x0e
    117e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1180:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__divdi3>
    1184:	7d 8b       	std	Y+21, r23	; 0x15
    1186:	8c 8b       	std	Y+20, r24	; 0x14
    1188:	39 2e       	mov	r3, r25
    118a:	28 87       	std	Y+8, r18	; 0x08
    118c:	39 87       	std	Y+9, r19	; 0x09
    118e:	4a 87       	std	Y+10, r20	; 0x0a
    1190:	5b 87       	std	Y+11, r21	; 0x0b
    1192:	6c 87       	std	Y+12, r22	; 0x0c
    1194:	7d 87       	std	Y+13, r23	; 0x0d
    1196:	8e 87       	std	Y+14, r24	; 0x0e
    1198:	9f 87       	std	Y+15, r25	; 0x0f
		Local_enuErrorStates = LCD_enuSendData('0' + (Copy_uint32Data / Local_uint8Dividor));
    119a:	a2 2e       	mov	r10, r18
    119c:	b3 2e       	mov	r11, r19
    119e:	c4 2e       	mov	r12, r20
    11a0:	d5 2e       	mov	r13, r21
    11a2:	e6 2e       	mov	r14, r22
    11a4:	f7 2e       	mov	r15, r23
    11a6:	08 2f       	mov	r16, r24
    11a8:	19 2f       	mov	r17, r25
    11aa:	22 2d       	mov	r18, r2
    11ac:	39 81       	ldd	r19, Y+1	; 0x01
    11ae:	4a 81       	ldd	r20, Y+2	; 0x02
    11b0:	5b 81       	ldd	r21, Y+3	; 0x03
    11b2:	6c 81       	ldd	r22, Y+4	; 0x04
    11b4:	7d 81       	ldd	r23, Y+5	; 0x05
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ba:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__divdi3>
    11be:	10 e3       	ldi	r17, 0x30	; 48
    11c0:	12 0f       	add	r17, r18
	return Local_enuErrorStates;
}

static inline ErrorStates_t LCD_enuSendData(uint8 Copy_uint8Data){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	Local_enuErrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN, HIGH);
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(RW_PORT, RW_PIN, LOW);
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	61 e0       	ldi	r22, 0x01	; 1
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	62 e0       	ldi	r22, 0x02	; 2
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>

	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 7));
    11e0:	41 2f       	mov	r20, r17
    11e2:	44 1f       	adc	r20, r20
    11e4:	44 27       	eor	r20, r20
    11e6:	44 1f       	adc	r20, r20
    11e8:	63 e0       	ldi	r22, 0x03	; 3
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 6));
    11f0:	16 fb       	bst	r17, 6
    11f2:	44 27       	eor	r20, r20
    11f4:	40 f9       	bld	r20, 0
    11f6:	64 e0       	ldi	r22, 0x04	; 4
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 5));
    11fe:	15 fb       	bst	r17, 5
    1200:	44 27       	eor	r20, r20
    1202:	40 f9       	bld	r20, 0
    1204:	65 e0       	ldi	r22, 0x05	; 5
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 4));
    120c:	14 fb       	bst	r17, 4
    120e:	44 27       	eor	r20, r20
    1210:	40 f9       	bld	r20, 0
    1212:	66 e0       	ldi	r22, 0x06	; 6
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D3_PORT, D3_PIN, BIT_MASK & (Copy_uint8Data >> 3));
	Local_enuErrorStates = DIO_enuSetPinValue(D2_PORT, D2_PIN, BIT_MASK & (Copy_uint8Data >> 2));
	Local_enuErrorStates = DIO_enuSetPinValue(D1_PORT, D1_PIN, BIT_MASK & (Copy_uint8Data >> 1));
	Local_enuErrorStates = DIO_enuSetPinValue(D0_PORT, D0_PIN, BIT_MASK & (Copy_uint8Data >> 0));
#elif LCD_BIT_MODE == FOUR_BIT_MODE
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    121a:	41 e0       	ldi	r20, 0x01	; 1
    121c:	62 e0       	ldi	r22, 0x02	; 2
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
    1224:	8f e1       	ldi	r24, 0x1F	; 31
    1226:	9e e4       	ldi	r25, 0x4E	; 78
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <LCD_enuDisplayFloat+0x842>
    122c:	00 c0       	rjmp	.+0      	; 0x122e <LCD_enuDisplayFloat+0x848>
    122e:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	62 e0       	ldi	r22, 0x02	; 2
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
    123a:	8f e1       	ldi	r24, 0x1F	; 31
    123c:	9e e4       	ldi	r25, 0x4E	; 78
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <LCD_enuDisplayFloat+0x858>
    1242:	00 c0       	rjmp	.+0      	; 0x1244 <LCD_enuDisplayFloat+0x85e>
    1244:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(D7_PORT, D7_PIN, BIT_MASK & (Copy_uint8Data >> 3));
    1246:	13 fb       	bst	r17, 3
    1248:	44 27       	eor	r20, r20
    124a:	40 f9       	bld	r20, 0
    124c:	63 e0       	ldi	r22, 0x03	; 3
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D6_PORT, D6_PIN, BIT_MASK & (Copy_uint8Data >> 2));
    1254:	12 fb       	bst	r17, 2
    1256:	44 27       	eor	r20, r20
    1258:	40 f9       	bld	r20, 0
    125a:	64 e0       	ldi	r22, 0x04	; 4
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D5_PORT, D5_PIN, BIT_MASK & (Copy_uint8Data >> 1));
    1262:	11 fb       	bst	r17, 1
    1264:	44 27       	eor	r20, r20
    1266:	40 f9       	bld	r20, 0
    1268:	65 e0       	ldi	r22, 0x05	; 5
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
	Local_enuErrorStates = DIO_enuSetPinValue(D4_PORT, D4_PIN, BIT_MASK & (Copy_uint8Data >> 0));
    1270:	41 2f       	mov	r20, r17
    1272:	41 70       	andi	r20, 0x01	; 1
    1274:	66 e0       	ldi	r22, 0x06	; 6
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
#endif

	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, HIGH);
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	62 e0       	ldi	r22, 0x02	; 2
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
    1286:	8f e1       	ldi	r24, 0x1F	; 31
    1288:	9e e4       	ldi	r25, 0x4E	; 78
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <LCD_enuDisplayFloat+0x8a4>
    128e:	00 c0       	rjmp	.+0      	; 0x1290 <LCD_enuDisplayFloat+0x8aa>
    1290:	00 00       	nop
	_delay_ms(10);
	Local_enuErrorStates = DIO_enuSetPinValue(EN_PORT, EN_PIN, LOW);
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	62 e0       	ldi	r22, 0x02	; 2
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_enuSetPinValue>
    129c:	88 8b       	std	Y+16, r24	; 0x10
    129e:	8f e1       	ldi	r24, 0x1F	; 31
    12a0:	9e e4       	ldi	r25, 0x4E	; 78
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <LCD_enuDisplayFloat+0x8bc>
    12a6:	00 c0       	rjmp	.+0      	; 0x12a8 <LCD_enuDisplayFloat+0x8c2>
    12a8:	00 00       	nop
	}

	while(Local_uint8Digits--){
		Local_uint8Dividor /= 10;
		Local_enuErrorStates = LCD_enuSendData('0' + (Copy_uint32Data / Local_uint8Dividor));
		Copy_uint32Data -= ((Copy_uint32Data / Local_uint8Dividor) * Local_uint8Dividor);
    12aa:	fd 88       	ldd	r15, Y+21	; 0x15
    12ac:	0c 89       	ldd	r16, Y+20	; 0x14
    12ae:	13 2d       	mov	r17, r3
    12b0:	22 2d       	mov	r18, r2
    12b2:	39 81       	ldd	r19, Y+1	; 0x01
    12b4:	4a 81       	ldd	r20, Y+2	; 0x02
    12b6:	5b 81       	ldd	r21, Y+3	; 0x03
    12b8:	6c 81       	ldd	r22, Y+4	; 0x04
    12ba:	7d 81       	ldd	r23, Y+5	; 0x05
    12bc:	8e 81       	ldd	r24, Y+6	; 0x06
    12be:	9f 81       	ldd	r25, Y+7	; 0x07
    12c0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__moddi3>
    12c4:	22 2e       	mov	r2, r18
    12c6:	39 83       	std	Y+1, r19	; 0x01
    12c8:	4a 83       	std	Y+2, r20	; 0x02
    12ca:	5b 83       	std	Y+3, r21	; 0x03
    12cc:	6c 83       	std	Y+4, r22	; 0x04
    12ce:	7d 83       	std	Y+5, r23	; 0x05
    12d0:	8e 83       	std	Y+6, r24	; 0x06
    12d2:	9f 83       	std	Y+7, r25	; 0x07
	while(Copy_uint32Data / Local_uint8Dividor){
		Local_uint8Dividor *= 10;
		++Local_uint8Digits;
	}

	while(Local_uint8Digits--){
    12d4:	4c 8a       	std	Y+20, r4	; 0x14
    12d6:	4c 88       	ldd	r4, Y+20	; 0x14
    12d8:	4a 94       	dec	r4
    12da:	9c 89       	ldd	r25, Y+20	; 0x14
    12dc:	91 11       	cpse	r25, r1
    12de:	3d cf       	rjmp	.-390    	; 0x115a <LCD_enuDisplayFloat+0x774>
	for(Local_uint8Iterator = 0; Local_uint8Iterator < FRACTION_MAX_RANGE; Local_uint8Iterator++)
		Local_f64_tFraction *= 10;

	Local_enuErrorStates = LCD_enuDisplayNumber(Local_f64_tFraction);
	return Local_enuErrorStates;
}
    12e0:	88 89       	ldd	r24, Y+16	; 0x10
    12e2:	65 96       	adiw	r28, 0x15	; 21
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	8f 90       	pop	r8
    1306:	7f 90       	pop	r7
    1308:	6f 90       	pop	r6
    130a:	5f 90       	pop	r5
    130c:	4f 90       	pop	r4
    130e:	3f 90       	pop	r3
    1310:	2f 90       	pop	r2
    1312:	08 95       	ret

00001314 <LCD_voidGotoxy>:
}

void LCD_voidGotoxy(uint8 row,uint8 column)
{
	uint8 Address=0;
	if (row<2	&&	column<16)
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	50 f4       	brcc	.+20     	; 0x132c <LCD_voidGotoxy+0x18>
    1318:	60 31       	cpi	r22, 0x10	; 16
    131a:	40 f4       	brcc	.+16     	; 0x132c <LCD_voidGotoxy+0x18>
	{
		Address=(row*0x40)+column;
    131c:	90 e4       	ldi	r25, 0x40	; 64
    131e:	89 9f       	mul	r24, r25
    1320:	60 0d       	add	r22, r0
    1322:	11 24       	eor	r1, r1
    1324:	86 2f       	mov	r24, r22
		Address|=(1<<7);
		LCD_enuSendCommand(Address);
    1326:	80 68       	ori	r24, 0x80	; 128
    1328:	0e 94 40 03 	call	0x680	; 0x680 <LCD_enuSendCommand>
    132c:	08 95       	ret

0000132e <evaluate>:
	   }
   };
   return 0;
   }

   f64 evaluate(u8 *buffer) {//6*5-1/9
    132e:	2f 92       	push	r2
    1330:	3f 92       	push	r3
    1332:	4f 92       	push	r4
    1334:	5f 92       	push	r5
    1336:	6f 92       	push	r6
    1338:	7f 92       	push	r7
    133a:	8f 92       	push	r8
    133c:	9f 92       	push	r9
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	28 97       	sbiw	r28, 0x08	; 8
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	8c 01       	movw	r16, r24
	   f64 result = 0.0f;
	   f32 num = 0.0f;
	   s8 op = '+';
	   s16 length = strlen(buffer);
    1364:	fc 01       	movw	r30, r24
    1366:	01 90       	ld	r0, Z+
    1368:	00 20       	and	r0, r0
    136a:	e9 f7       	brne	.-6      	; 0x1366 <evaluate+0x38>
    136c:	31 97       	sbiw	r30, 0x01	; 1
    136e:	7f 01       	movw	r14, r30
    1370:	e8 1a       	sub	r14, r24
    1372:	f9 0a       	sbc	r15, r25
	   s16 i = 0;
    1374:	18 86       	std	Y+8, r1	; 0x08
    1376:	1f 82       	std	Y+7, r1	; 0x07
   }

   f64 evaluate(u8 *buffer) {//6*5-1/9
	   f64 result = 0.0f;
	   f32 num = 0.0f;
	   s8 op = '+';
    1378:	2b e2       	ldi	r18, 0x2B	; 43
    137a:	29 83       	std	Y+1, r18	; 0x01
   return 0;
   }

   f64 evaluate(u8 *buffer) {//6*5-1/9
	   f64 result = 0.0f;
	   f32 num = 0.0f;
    137c:	41 2c       	mov	r4, r1
    137e:	51 2c       	mov	r5, r1
    1380:	32 01       	movw	r6, r4
   };
   return 0;
   }

   f64 evaluate(u8 *buffer) {//6*5-1/9
	   f64 result = 0.0f;
    1382:	4a 82       	std	Y+2, r4	; 0x02
    1384:	5b 82       	std	Y+3, r5	; 0x03
    1386:	6c 82       	std	Y+4, r6	; 0x04
    1388:	7d 82       	std	Y+5, r7	; 0x05
	   f32 num = 0.0f;
	   s8 op = '+';
	   s16 length = strlen(buffer);
	   s16 i = 0;
	   while (i < length) {
    138a:	0d c1       	rjmp	.+538    	; 0x15a6 <evaluate+0x278>
		   if (buffer[i] >= '0' && buffer[i] <= '9') {
    138c:	8f 81       	ldd	r24, Y+7	; 0x07
    138e:	98 85       	ldd	r25, Y+8	; 0x08
    1390:	6c 01       	movw	r12, r24
    1392:	c0 0e       	add	r12, r16
    1394:	d1 1e       	adc	r13, r17
    1396:	f6 01       	movw	r30, r12
    1398:	b0 80       	ld	r11, Z
    139a:	20 ed       	ldi	r18, 0xD0	; 208
    139c:	2b 0d       	add	r18, r11
    139e:	2a 30       	cpi	r18, 0x0A	; 10
    13a0:	18 f5       	brcc	.+70     	; 0x13e8 <evaluate+0xba>
			   num = num * 10.0f + (buffer[i] - '0');
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	c3 01       	movw	r24, r6
    13ac:	b2 01       	movw	r22, r4
    13ae:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__mulsf3>
    13b2:	2b 01       	movw	r4, r22
    13b4:	3c 01       	movw	r6, r24
    13b6:	6b 2d       	mov	r22, r11
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	60 53       	subi	r22, 0x30	; 48
    13bc:	71 09       	sbc	r23, r1
    13be:	07 2e       	mov	r0, r23
    13c0:	00 0c       	add	r0, r0
    13c2:	88 0b       	sbc	r24, r24
    13c4:	99 0b       	sbc	r25, r25
    13c6:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__floatsisf>
    13ca:	9b 01       	movw	r18, r22
    13cc:	ac 01       	movw	r20, r24
    13ce:	c3 01       	movw	r24, r6
    13d0:	b2 01       	movw	r22, r4
    13d2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__addsf3>
    13d6:	2b 01       	movw	r4, r22
    13d8:	3c 01       	movw	r6, r24
			   i++;
    13da:	2f 81       	ldd	r18, Y+7	; 0x07
    13dc:	38 85       	ldd	r19, Y+8	; 0x08
    13de:	2f 5f       	subi	r18, 0xFF	; 255
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	38 87       	std	Y+8, r19	; 0x08
    13e4:	2f 83       	std	Y+7, r18	; 0x07
    13e6:	df c0       	rjmp	.+446    	; 0x15a6 <evaluate+0x278>
			   }  else if (buffer[i] == '*' || buffer[i] == '/') {
    13e8:	3a e2       	ldi	r19, 0x2A	; 42
    13ea:	b3 16       	cp	r11, r19
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <evaluate+0xc6>
    13ee:	ef e2       	ldi	r30, 0x2F	; 47
    13f0:	be 12       	cpse	r11, r30
    13f2:	a5 c0       	rjmp	.+330    	; 0x153e <evaluate+0x210>
			   if(buffer[i+1]=='*' || buffer[i+1] == '/' || buffer[i+1]=='-' || buffer[i+1] == '+' )
    13f4:	9c 01       	movw	r18, r24
    13f6:	2f 5f       	subi	r18, 0xFF	; 255
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	38 87       	std	Y+8, r19	; 0x08
    13fc:	2f 83       	std	Y+7, r18	; 0x07
    13fe:	f9 01       	movw	r30, r18
    1400:	e0 0f       	add	r30, r16
    1402:	f1 1f       	adc	r31, r17
    1404:	80 81       	ld	r24, Z
    1406:	8a 32       	cpi	r24, 0x2A	; 42
    1408:	31 f0       	breq	.+12     	; 0x1416 <evaluate+0xe8>
    140a:	8f 32       	cpi	r24, 0x2F	; 47
    140c:	21 f0       	breq	.+8      	; 0x1416 <evaluate+0xe8>
    140e:	8d 32       	cpi	r24, 0x2D	; 45
    1410:	11 f0       	breq	.+4      	; 0x1416 <evaluate+0xe8>
    1412:	8b 32       	cpi	r24, 0x2B	; 43
    1414:	19 f4       	brne	.+6      	; 0x141c <evaluate+0xee>
			   flagSyntax=1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__data_end>

			   s8 c = buffer[i];
    141c:	f6 01       	movw	r30, r12
    141e:	f0 81       	ld	r31, Z
    1420:	fe 83       	std	Y+6, r31	; 0x06
			   i++;
			   f32 next_num = 0.0f;
			   u8 flagNextNum=0;
			   while (i < length && buffer[i] == ' ') {
    1422:	05 c0       	rjmp	.+10     	; 0x142e <evaluate+0x100>
				   i++;
    1424:	8f 81       	ldd	r24, Y+7	; 0x07
    1426:	98 85       	ldd	r25, Y+8	; 0x08
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	98 87       	std	Y+8, r25	; 0x08
    142c:	8f 83       	std	Y+7, r24	; 0x07

			   s8 c = buffer[i];
			   i++;
			   f32 next_num = 0.0f;
			   u8 flagNextNum=0;
			   while (i < length && buffer[i] == ' ') {
    142e:	ef 81       	ldd	r30, Y+7	; 0x07
    1430:	f8 85       	ldd	r31, Y+8	; 0x08
    1432:	ee 15       	cp	r30, r14
    1434:	ff 05       	cpc	r31, r15
    1436:	6c f5       	brge	.+90     	; 0x1492 <evaluate+0x164>
    1438:	e0 0f       	add	r30, r16
    143a:	f1 1f       	adc	r31, r17
    143c:	80 81       	ld	r24, Z
    143e:	80 32       	cpi	r24, 0x20	; 32
    1440:	89 f3       	breq	.-30     	; 0x1424 <evaluate+0xf6>
    1442:	c1 2c       	mov	r12, r1
    1444:	81 2c       	mov	r8, r1
    1446:	91 2c       	mov	r9, r1
    1448:	54 01       	movw	r10, r8
    144a:	27 c0       	rjmp	.+78     	; 0x149a <evaluate+0x16c>
				   i++;
			   }
			   while (i < length && buffer[i] >= '0' && buffer[i] <= '9') {
				   next_num = next_num * 10.0f + (buffer[i] - '0');
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e2       	ldi	r20, 0x20	; 32
    1452:	51 e4       	ldi	r21, 0x41	; 65
    1454:	c5 01       	movw	r24, r10
    1456:	b4 01       	movw	r22, r8
    1458:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__mulsf3>
    145c:	4b 01       	movw	r8, r22
    145e:	5c 01       	movw	r10, r24
    1460:	6d 2d       	mov	r22, r13
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	60 53       	subi	r22, 0x30	; 48
    1466:	71 09       	sbc	r23, r1
    1468:	07 2e       	mov	r0, r23
    146a:	00 0c       	add	r0, r0
    146c:	88 0b       	sbc	r24, r24
    146e:	99 0b       	sbc	r25, r25
    1470:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__floatsisf>
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	c5 01       	movw	r24, r10
    147a:	b4 01       	movw	r22, r8
    147c:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__addsf3>
    1480:	4b 01       	movw	r8, r22
    1482:	5c 01       	movw	r10, r24
				   i++;
    1484:	91 01       	movw	r18, r2
    1486:	2f 5f       	subi	r18, 0xFF	; 255
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	38 87       	std	Y+8, r19	; 0x08
    148c:	2f 83       	std	Y+7, r18	; 0x07
				   flagNextNum++;
    148e:	c3 94       	inc	r12
    1490:	04 c0       	rjmp	.+8      	; 0x149a <evaluate+0x16c>
    1492:	c1 2c       	mov	r12, r1
    1494:	81 2c       	mov	r8, r1
    1496:	91 2c       	mov	r9, r1
    1498:	54 01       	movw	r10, r8
			   f32 next_num = 0.0f;
			   u8 flagNextNum=0;
			   while (i < length && buffer[i] == ' ') {
				   i++;
			   }
			   while (i < length && buffer[i] >= '0' && buffer[i] <= '9') {
    149a:	8f 81       	ldd	r24, Y+7	; 0x07
    149c:	98 85       	ldd	r25, Y+8	; 0x08
    149e:	8e 15       	cp	r24, r14
    14a0:	9f 05       	cpc	r25, r15
    14a2:	94 f4       	brge	.+36     	; 0x14c8 <evaluate+0x19a>
    14a4:	1c 01       	movw	r2, r24
    14a6:	fc 01       	movw	r30, r24
    14a8:	e0 0f       	add	r30, r16
    14aa:	f1 1f       	adc	r31, r17
    14ac:	d0 80       	ld	r13, Z
    14ae:	9f e2       	ldi	r25, 0x2F	; 47
    14b0:	9d 15       	cp	r25, r13
    14b2:	50 f4       	brcc	.+20     	; 0x14c8 <evaluate+0x19a>
    14b4:	e9 e3       	ldi	r30, 0x39	; 57
    14b6:	ed 15       	cp	r30, r13
    14b8:	48 f6       	brcc	.-110    	; 0x144c <evaluate+0x11e>
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <evaluate+0x19a>
				   next_num = next_num * 10.0f + (buffer[i] - '0');
				   i++;
				   flagNextNum++;
			   }
			   while (i < length && buffer[i] == ' ') {
				   i++;
    14bc:	2f 81       	ldd	r18, Y+7	; 0x07
    14be:	38 85       	ldd	r19, Y+8	; 0x08
    14c0:	2f 5f       	subi	r18, 0xFF	; 255
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	38 87       	std	Y+8, r19	; 0x08
    14c6:	2f 83       	std	Y+7, r18	; 0x07
			   while (i < length && buffer[i] >= '0' && buffer[i] <= '9') {
				   next_num = next_num * 10.0f + (buffer[i] - '0');
				   i++;
				   flagNextNum++;
			   }
			   while (i < length && buffer[i] == ' ') {
    14c8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ca:	98 85       	ldd	r25, Y+8	; 0x08
    14cc:	8e 15       	cp	r24, r14
    14ce:	9f 05       	cpc	r25, r15
    14d0:	34 f4       	brge	.+12     	; 0x14de <evaluate+0x1b0>
    14d2:	fc 01       	movw	r30, r24
    14d4:	e0 0f       	add	r30, r16
    14d6:	f1 1f       	adc	r31, r17
    14d8:	80 81       	ld	r24, Z
    14da:	80 32       	cpi	r24, 0x20	; 32
    14dc:	79 f3       	breq	.-34     	; 0x14bc <evaluate+0x18e>
				   i++;
			   }
			   if (c == '*') {
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	9a 32       	cpi	r25, 0x2A	; 42
    14e2:	49 f4       	brne	.+18     	; 0x14f6 <evaluate+0x1c8>
				   num *= next_num;
    14e4:	a5 01       	movw	r20, r10
    14e6:	94 01       	movw	r18, r8
    14e8:	c3 01       	movw	r24, r6
    14ea:	b2 01       	movw	r22, r4
    14ec:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__mulsf3>
    14f0:	2b 01       	movw	r4, r22
    14f2:	3c 01       	movw	r6, r24
    14f4:	58 c0       	rjmp	.+176    	; 0x15a6 <evaluate+0x278>
				   } else {
				   if(flagNextNum<1){
    14f6:	c1 10       	cpse	r12, r1
    14f8:	08 c0       	rjmp	.+16     	; 0x150a <evaluate+0x1dc>
					   flagSyntax=1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__data_end>
					   return flagSyntax;
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	30 e8       	ldi	r19, 0x80	; 128
    1506:	2f e3       	ldi	r18, 0x3F	; 63
    1508:	70 c0       	rjmp	.+224    	; 0x15ea <evaluate+0x2bc>
				   }
				   if (next_num == 0.0f) {
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	c5 01       	movw	r24, r10
    1512:	b4 01       	movw	r22, r8
    1514:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__cmpsf2>
    1518:	81 11       	cpse	r24, r1
    151a:	08 c0       	rjmp	.+16     	; 0x152c <evaluate+0x1fe>
					   flagZero = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <flagZero>
					   return flagZero;
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	30 e8       	ldi	r19, 0x80	; 128
    1528:	2f e3       	ldi	r18, 0x3F	; 63
    152a:	5f c0       	rjmp	.+190    	; 0x15ea <evaluate+0x2bc>
				   }
				   num /= next_num;
    152c:	a5 01       	movw	r20, r10
    152e:	94 01       	movw	r18, r8
    1530:	c3 01       	movw	r24, r6
    1532:	b2 01       	movw	r22, r4
    1534:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__divsf3>
    1538:	2b 01       	movw	r4, r22
    153a:	3c 01       	movw	r6, r24
    153c:	34 c0       	rjmp	.+104    	; 0x15a6 <evaluate+0x278>
			   }
			   } else {
			   if(buffer[i+1]=='*' || buffer[i+1] == '/' || buffer[i+1]=='-' || buffer[i+1] == '+' )
    153e:	fc 01       	movw	r30, r24
    1540:	31 96       	adiw	r30, 0x01	; 1
    1542:	f8 87       	std	Y+8, r31	; 0x08
    1544:	ef 83       	std	Y+7, r30	; 0x07
    1546:	e0 0f       	add	r30, r16
    1548:	f1 1f       	adc	r31, r17
    154a:	80 81       	ld	r24, Z
    154c:	8a 32       	cpi	r24, 0x2A	; 42
    154e:	31 f0       	breq	.+12     	; 0x155c <evaluate+0x22e>
    1550:	8f 32       	cpi	r24, 0x2F	; 47
    1552:	21 f0       	breq	.+8      	; 0x155c <evaluate+0x22e>
    1554:	8d 32       	cpi	r24, 0x2D	; 45
    1556:	11 f0       	breq	.+4      	; 0x155c <evaluate+0x22e>
    1558:	8b 32       	cpi	r24, 0x2B	; 43
    155a:	19 f4       	brne	.+6      	; 0x1562 <evaluate+0x234>
			   flagSyntax=1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__data_end>
			   if (op == '+') {
    1562:	f9 81       	ldd	r31, Y+1	; 0x01
    1564:	fb 32       	cpi	r31, 0x2B	; 43
    1566:	69 f4       	brne	.+26     	; 0x1582 <evaluate+0x254>
				   result += num;
    1568:	a3 01       	movw	r20, r6
    156a:	92 01       	movw	r18, r4
    156c:	6a 81       	ldd	r22, Y+2	; 0x02
    156e:	7b 81       	ldd	r23, Y+3	; 0x03
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__addsf3>
    1578:	6a 83       	std	Y+2, r22	; 0x02
    157a:	7b 83       	std	Y+3, r23	; 0x03
    157c:	8c 83       	std	Y+4, r24	; 0x04
    157e:	9d 83       	std	Y+5, r25	; 0x05
    1580:	0c c0       	rjmp	.+24     	; 0x159a <evaluate+0x26c>
				   } else {
				   result -= num;
    1582:	a3 01       	movw	r20, r6
    1584:	92 01       	movw	r18, r4
    1586:	6a 81       	ldd	r22, Y+2	; 0x02
    1588:	7b 81       	ldd	r23, Y+3	; 0x03
    158a:	8c 81       	ldd	r24, Y+4	; 0x04
    158c:	9d 81       	ldd	r25, Y+5	; 0x05
    158e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__subsf3>
    1592:	6a 83       	std	Y+2, r22	; 0x02
    1594:	7b 83       	std	Y+3, r23	; 0x03
    1596:	8c 83       	std	Y+4, r24	; 0x04
    1598:	9d 83       	std	Y+5, r25	; 0x05
			   }
			   num = 0.0f;
			   op = buffer[i];
    159a:	f6 01       	movw	r30, r12
    159c:	f0 81       	ld	r31, Z
    159e:	f9 83       	std	Y+1, r31	; 0x01
			   if (op == '+') {
				   result += num;
				   } else {
				   result -= num;
			   }
			   num = 0.0f;
    15a0:	41 2c       	mov	r4, r1
    15a2:	51 2c       	mov	r5, r1
    15a4:	32 01       	movw	r6, r4
	   f64 result = 0.0f;
	   f32 num = 0.0f;
	   s8 op = '+';
	   s16 length = strlen(buffer);
	   s16 i = 0;
	   while (i < length) {
    15a6:	8f 81       	ldd	r24, Y+7	; 0x07
    15a8:	98 85       	ldd	r25, Y+8	; 0x08
    15aa:	8e 15       	cp	r24, r14
    15ac:	9f 05       	cpc	r25, r15
    15ae:	0c f4       	brge	.+2      	; 0x15b2 <evaluate+0x284>
    15b0:	ed ce       	rjmp	.-550    	; 0x138c <evaluate+0x5e>
			   num = 0.0f;
			   op = buffer[i];
			   i++;
		   }
	   }
	   if (op == '+') {
    15b2:	99 81       	ldd	r25, Y+1	; 0x01
    15b4:	9b 32       	cpi	r25, 0x2B	; 43
    15b6:	69 f4       	brne	.+26     	; 0x15d2 <evaluate+0x2a4>
		   result += num;
    15b8:	a3 01       	movw	r20, r6
    15ba:	92 01       	movw	r18, r4
    15bc:	6a 81       	ldd	r22, Y+2	; 0x02
    15be:	7b 81       	ldd	r23, Y+3	; 0x03
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__addsf3>
    15c8:	56 2f       	mov	r21, r22
    15ca:	47 2f       	mov	r20, r23
    15cc:	38 2f       	mov	r19, r24
    15ce:	29 2f       	mov	r18, r25
    15d0:	0c c0       	rjmp	.+24     	; 0x15ea <evaluate+0x2bc>
		   } else {
		   result -= num;
    15d2:	a3 01       	movw	r20, r6
    15d4:	92 01       	movw	r18, r4
    15d6:	6a 81       	ldd	r22, Y+2	; 0x02
    15d8:	7b 81       	ldd	r23, Y+3	; 0x03
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__subsf3>
    15e2:	56 2f       	mov	r21, r22
    15e4:	47 2f       	mov	r20, r23
    15e6:	38 2f       	mov	r19, r24
    15e8:	29 2f       	mov	r18, r25
	   }
	   return result;
    15ea:	65 2f       	mov	r22, r21
    15ec:	74 2f       	mov	r23, r20
    15ee:	83 2f       	mov	r24, r19
    15f0:	92 2f       	mov	r25, r18
    15f2:	28 96       	adiw	r28, 0x08	; 8
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	bf 90       	pop	r11
    1610:	af 90       	pop	r10
    1612:	9f 90       	pop	r9
    1614:	8f 90       	pop	r8
    1616:	7f 90       	pop	r7
    1618:	6f 90       	pop	r6
    161a:	5f 90       	pop	r5
    161c:	4f 90       	pop	r4
    161e:	3f 90       	pop	r3
    1620:	2f 90       	pop	r2
    1622:	08 95       	ret

00001624 <main>:
u8 flagClear = 0, flagZero = 0,flagSyntax=0; //to clear LCD after every process, detect dividing by 0
extern KPAD_t KPAD_AstrKeyPadConfig[NUM_OF_KPADS];
f64 evaluate(u8 *buffer);

int main(void)
{
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	c5 56       	subi	r28, 0x65	; 101
    162e:	d1 09       	sbc	r29, r1
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
	LCD_enuInit();
    163a:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_enuInit>
	KPAD_enuInit(KPAD_AstrKeyPadConfig);
    163e:	80 e6       	ldi	r24, 0x60	; 96
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 49 00 	call	0x92	; 0x92 <KPAD_enuInit>
   
   u8 key, flagClear = 0, buffer_position = 0;
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	00 e0       	ldi	r16, 0x00	; 0

   u8 buffer[MAX_buffer_LENGTH]; //array to store the whole buffer

   while (1) {

	   KPAD_enuGetPressedkey(KPAD_AstrKeyPadConfig,&key);
    164a:	be 01       	movw	r22, r28
    164c:	6f 5f       	subi	r22, 0xFF	; 255
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	80 e6       	ldi	r24, 0x60	; 96
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 a7 00 	call	0x14e	; 0x14e <KPAD_enuGetPressedkey>
	   if (key != 0
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	88 23       	and	r24, r24
    165c:	09 f1       	breq	.+66     	; 0x16a0 <main+0x7c>
	   && (key == '1' || key == '2' || key == '3' || key == '4'
	   || key == '5' || key == '6' || key == '7' || key == '8'
	   || key == '9' || key == '0' || key == '+' || key == '-'
    165e:	90 ed       	ldi	r25, 0xD0	; 208
    1660:	98 0f       	add	r25, r24

   while (1) {

	   KPAD_enuGetPressedkey(KPAD_AstrKeyPadConfig,&key);
	   if (key != 0
	   && (key == '1' || key == '2' || key == '3' || key == '4'
    1662:	9a 30       	cpi	r25, 0x0A	; 10
    1664:	40 f0       	brcs	.+16     	; 0x1676 <main+0x52>
	   || key == '5' || key == '6' || key == '7' || key == '8'
	   || key == '9' || key == '0' || key == '+' || key == '-'
    1666:	8b 32       	cpi	r24, 0x2B	; 43
    1668:	31 f0       	breq	.+12     	; 0x1676 <main+0x52>
    166a:	8d 32       	cpi	r24, 0x2D	; 45
    166c:	21 f0       	breq	.+8      	; 0x1676 <main+0x52>
	   || key == '*' || key == '/')) {
    166e:	8a 32       	cpi	r24, 0x2A	; 42
    1670:	11 f0       	breq	.+4      	; 0x1676 <main+0x52>
    1672:	8f 32       	cpi	r24, 0x2F	; 47
    1674:	a9 f4       	brne	.+42     	; 0x16a0 <main+0x7c>

		   if (flagClear == 1) {//clearing the LCD
    1676:	01 30       	cpi	r16, 0x01	; 1
    1678:	21 f4       	brne	.+8      	; 0x1682 <main+0x5e>
				LCD_enuSendCommand(0x01);
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	0e 94 40 03 	call	0x680	; 0x680 <LCD_enuSendCommand>
			   flagClear = 0;
    1680:	00 e0       	ldi	r16, 0x00	; 0
		   }
		   if (buffer_position < MAX_buffer_LENGTH - 1)//store the characters in the array
    1682:	13 36       	cpi	r17, 0x63	; 99
    1684:	48 f4       	brcc	.+18     	; 0x1698 <main+0x74>
		   buffer[buffer_position++] = key;
    1686:	e2 e0       	ldi	r30, 0x02	; 2
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	ec 0f       	add	r30, r28
    168c:	fd 1f       	adc	r31, r29
    168e:	e1 0f       	add	r30, r17
    1690:	f1 1d       	adc	r31, r1
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	80 83       	st	Z, r24
    1696:	1f 5f       	subi	r17, 0xFF	; 255

		   LCD_enuDisplayChar(key);//printing every character
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_enuDisplayChar>
    169e:	d5 cf       	rjmp	.-86     	; 0x164a <main+0x26>
		   } else if (key == '=') {
    16a0:	8d 33       	cpi	r24, 0x3D	; 61
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <main+0x82>
    16a4:	40 c0       	rjmp	.+128    	; 0x1726 <main+0x102>
		   flagClear = 1;    //flag is up after every process
		   buffer[buffer_position] = '\0'; // terminate the string
    16a6:	e2 e0       	ldi	r30, 0x02	; 2
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	ec 0f       	add	r30, r28
    16ac:	fd 1f       	adc	r31, r29
    16ae:	e1 0f       	add	r30, r17
    16b0:	f1 1d       	adc	r31, r1
    16b2:	10 82       	st	Z, r1
		   f64 result = evaluate(buffer);//calling the evaluate function to calculate the buffer
    16b4:	ce 01       	movw	r24, r28
    16b6:	02 96       	adiw	r24, 0x02	; 2
    16b8:	0e 94 97 09 	call	0x132e	; 0x132e <evaluate>
    16bc:	6b 01       	movw	r12, r22
    16be:	7c 01       	movw	r14, r24
		   if (flagZero == 1) {//when divide by zero flag is up
    16c0:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <flagZero>
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	59 f4       	brne	.+22     	; 0x16de <main+0xba>
			   LCD_voidGotoxy(2, 1);
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	0e 94 8a 09 	call	0x1314	; 0x1314 <LCD_voidGotoxy>
			   LCD_enuDisplayString("error div by 0");
    16d0:	80 e8       	ldi	r24, 0x80	; 128
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_enuDisplayString>
			   flagZero = 0;
    16d8:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <flagZero>
    16dc:	1a c0       	rjmp	.+52     	; 0x1712 <main+0xee>
			   }else if (flagSyntax == 1) {//when divide by zero flag is up
    16de:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	59 f4       	brne	.+22     	; 0x16fc <main+0xd8>
			   LCD_voidGotoxy(2, 1);
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	0e 94 8a 09 	call	0x1314	; 0x1314 <LCD_voidGotoxy>
			   LCD_enuDisplayString("Syntax error");
    16ee:	8f e8       	ldi	r24, 0x8F	; 143
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_enuDisplayString>
			   flagSyntax = 0;
    16f6:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__data_end>
    16fa:	0b c0       	rjmp	.+22     	; 0x1712 <main+0xee>
			   } else {
			   LCD_voidGotoxy(2, 1);
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	0e 94 8a 09 	call	0x1314	; 0x1314 <LCD_voidGotoxy>
			   LCD_enuDisplayChar('=');
    1704:	8d e3       	ldi	r24, 0x3D	; 61
    1706:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_enuDisplayChar>
			   LCD_enuDisplayFloat(result);
    170a:	c7 01       	movw	r24, r14
    170c:	b6 01       	movw	r22, r12
    170e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_enuDisplayFloat>
		   }
		   buffer_position = 0;
		   memset(buffer, 0, sizeof(buffer));//to clear the buffer
    1712:	fe 01       	movw	r30, r28
    1714:	32 96       	adiw	r30, 0x02	; 2
    1716:	84 e6       	ldi	r24, 0x64	; 100
    1718:	df 01       	movw	r26, r30
    171a:	1d 92       	st	X+, r1
    171c:	8a 95       	dec	r24
    171e:	e9 f7       	brne	.-6      	; 0x171a <main+0xf6>
			   } else {
			   LCD_voidGotoxy(2, 1);
			   LCD_enuDisplayChar('=');
			   LCD_enuDisplayFloat(result);
		   }
		   buffer_position = 0;
    1720:	10 e0       	ldi	r17, 0x00	; 0
		   if (buffer_position < MAX_buffer_LENGTH - 1)//store the characters in the array
		   buffer[buffer_position++] = key;

		   LCD_enuDisplayChar(key);//printing every character
		   } else if (key == '=') {
		   flagClear = 1;    //flag is up after every process
    1722:	01 e0       	ldi	r16, 0x01	; 1
    1724:	92 cf       	rjmp	.-220    	; 0x164a <main+0x26>
			   LCD_enuDisplayFloat(result);
		   }
		   buffer_position = 0;
		   memset(buffer, 0, sizeof(buffer));//to clear the buffer
	   }
	   else if (key == 'C') {//clearing the LCD
    1726:	83 34       	cpi	r24, 0x43	; 67
    1728:	09 f0       	breq	.+2      	; 0x172c <main+0x108>
    172a:	8f cf       	rjmp	.-226    	; 0x164a <main+0x26>
		   buffer_position = 0;
		   memset(buffer, 0, sizeof(buffer));
    172c:	fe 01       	movw	r30, r28
    172e:	32 96       	adiw	r30, 0x02	; 2
    1730:	84 e6       	ldi	r24, 0x64	; 100
    1732:	df 01       	movw	r26, r30
    1734:	1d 92       	st	X+, r1
    1736:	8a 95       	dec	r24
    1738:	e9 f7       	brne	.-6      	; 0x1734 <main+0x110>
		   LCD_enuSendCommand(0x01);
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	0e 94 40 03 	call	0x680	; 0x680 <LCD_enuSendCommand>
		   }
		   buffer_position = 0;
		   memset(buffer, 0, sizeof(buffer));//to clear the buffer
	   }
	   else if (key == 'C') {//clearing the LCD
		   buffer_position = 0;
    1740:	10 e0       	ldi	r17, 0x00	; 0
    1742:	83 cf       	rjmp	.-250    	; 0x164a <main+0x26>

00001744 <DIO_enuSetPinDir>:
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	08 f0       	brcs	.+2      	; 0x174a <DIO_enuSetPinDir+0x6>
    1748:	68 c0       	rjmp	.+208    	; 0x181a <DIO_enuSetPinDir+0xd6>
    174a:	68 30       	cpi	r22, 0x08	; 8
    174c:	08 f0       	brcs	.+2      	; 0x1750 <DIO_enuSetPinDir+0xc>
    174e:	67 c0       	rjmp	.+206    	; 0x181e <DIO_enuSetPinDir+0xda>
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	f1 f0       	breq	.+60     	; 0x1790 <DIO_enuSetPinDir+0x4c>
    1754:	30 f0       	brcs	.+12     	; 0x1762 <DIO_enuSetPinDir+0x1e>
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	91 f1       	breq	.+100    	; 0x17be <DIO_enuSetPinDir+0x7a>
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	09 f4       	brne	.+2      	; 0x1760 <DIO_enuSetPinDir+0x1c>
    175e:	46 c0       	rjmp	.+140    	; 0x17ec <DIO_enuSetPinDir+0xa8>
    1760:	60 c0       	rjmp	.+192    	; 0x1822 <DIO_enuSetPinDir+0xde>
    1762:	2a b3       	in	r18, 0x1a	; 26
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	06 2e       	mov	r0, r22
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_enuSetPinDir+0x2c>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_enuSetPinDir+0x28>
    1774:	80 95       	com	r24
    1776:	82 23       	and	r24, r18
    1778:	8a bb       	out	0x1a, r24	; 26
    177a:	8a b3       	in	r24, 0x1a	; 26
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <DIO_enuSetPinDir+0x40>
    1780:	44 0f       	add	r20, r20
    1782:	55 1f       	adc	r21, r21
    1784:	6a 95       	dec	r22
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <DIO_enuSetPinDir+0x3c>
    1788:	48 2b       	or	r20, r24
    178a:	4a bb       	out	0x1a, r20	; 26
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	08 95       	ret
    1790:	27 b3       	in	r18, 0x17	; 23
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	06 2e       	mov	r0, r22
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_enuSetPinDir+0x5a>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <DIO_enuSetPinDir+0x56>
    17a2:	80 95       	com	r24
    17a4:	82 23       	and	r24, r18
    17a6:	87 bb       	out	0x17, r24	; 23
    17a8:	87 b3       	in	r24, 0x17	; 23
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <DIO_enuSetPinDir+0x6e>
    17ae:	44 0f       	add	r20, r20
    17b0:	55 1f       	adc	r21, r21
    17b2:	6a 95       	dec	r22
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <DIO_enuSetPinDir+0x6a>
    17b6:	48 2b       	or	r20, r24
    17b8:	47 bb       	out	0x17, r20	; 23
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	08 95       	ret
    17be:	24 b3       	in	r18, 0x14	; 20
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	06 2e       	mov	r0, r22
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <DIO_enuSetPinDir+0x88>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <DIO_enuSetPinDir+0x84>
    17d0:	80 95       	com	r24
    17d2:	82 23       	and	r24, r18
    17d4:	84 bb       	out	0x14, r24	; 20
    17d6:	84 b3       	in	r24, 0x14	; 20
    17d8:	50 e0       	ldi	r21, 0x00	; 0
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <DIO_enuSetPinDir+0x9c>
    17dc:	44 0f       	add	r20, r20
    17de:	55 1f       	adc	r21, r21
    17e0:	6a 95       	dec	r22
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <DIO_enuSetPinDir+0x98>
    17e4:	48 2b       	or	r20, r24
    17e6:	44 bb       	out	0x14, r20	; 20
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	08 95       	ret
    17ec:	21 b3       	in	r18, 0x11	; 17
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	06 2e       	mov	r0, r22
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_enuSetPinDir+0xb6>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_enuSetPinDir+0xb2>
    17fe:	80 95       	com	r24
    1800:	82 23       	and	r24, r18
    1802:	81 bb       	out	0x11, r24	; 17
    1804:	81 b3       	in	r24, 0x11	; 17
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_enuSetPinDir+0xca>
    180a:	44 0f       	add	r20, r20
    180c:	55 1f       	adc	r21, r21
    180e:	6a 95       	dec	r22
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_enuSetPinDir+0xc6>
    1812:	48 2b       	or	r20, r24
    1814:	41 bb       	out	0x11, r20	; 17
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	08 95       	ret
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	08 95       	ret
    181e:	84 e0       	ldi	r24, 0x04	; 4
    1820:	08 95       	ret
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	08 95       	ret

00001826 <DIO_enuSetPinValue>:
    1826:	84 30       	cpi	r24, 0x04	; 4
    1828:	08 f0       	brcs	.+2      	; 0x182c <DIO_enuSetPinValue+0x6>
    182a:	68 c0       	rjmp	.+208    	; 0x18fc <DIO_enuSetPinValue+0xd6>
    182c:	68 30       	cpi	r22, 0x08	; 8
    182e:	08 f0       	brcs	.+2      	; 0x1832 <DIO_enuSetPinValue+0xc>
    1830:	67 c0       	rjmp	.+206    	; 0x1900 <DIO_enuSetPinValue+0xda>
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	f1 f0       	breq	.+60     	; 0x1872 <DIO_enuSetPinValue+0x4c>
    1836:	30 f0       	brcs	.+12     	; 0x1844 <DIO_enuSetPinValue+0x1e>
    1838:	82 30       	cpi	r24, 0x02	; 2
    183a:	91 f1       	breq	.+100    	; 0x18a0 <DIO_enuSetPinValue+0x7a>
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	09 f4       	brne	.+2      	; 0x1842 <DIO_enuSetPinValue+0x1c>
    1840:	46 c0       	rjmp	.+140    	; 0x18ce <DIO_enuSetPinValue+0xa8>
    1842:	60 c0       	rjmp	.+192    	; 0x1904 <DIO_enuSetPinValue+0xde>
    1844:	2b b3       	in	r18, 0x1b	; 27
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	06 2e       	mov	r0, r22
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <DIO_enuSetPinValue+0x2c>
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	0a 94       	dec	r0
    1854:	e2 f7       	brpl	.-8      	; 0x184e <DIO_enuSetPinValue+0x28>
    1856:	80 95       	com	r24
    1858:	82 23       	and	r24, r18
    185a:	8b bb       	out	0x1b, r24	; 27
    185c:	8b b3       	in	r24, 0x1b	; 27
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_enuSetPinValue+0x40>
    1862:	44 0f       	add	r20, r20
    1864:	55 1f       	adc	r21, r21
    1866:	6a 95       	dec	r22
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_enuSetPinValue+0x3c>
    186a:	48 2b       	or	r20, r24
    186c:	4b bb       	out	0x1b, r20	; 27
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	08 95       	ret
    1872:	28 b3       	in	r18, 0x18	; 24
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	06 2e       	mov	r0, r22
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_enuSetPinValue+0x5a>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_enuSetPinValue+0x56>
    1884:	80 95       	com	r24
    1886:	82 23       	and	r24, r18
    1888:	88 bb       	out	0x18, r24	; 24
    188a:	88 b3       	in	r24, 0x18	; 24
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_enuSetPinValue+0x6e>
    1890:	44 0f       	add	r20, r20
    1892:	55 1f       	adc	r21, r21
    1894:	6a 95       	dec	r22
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <DIO_enuSetPinValue+0x6a>
    1898:	48 2b       	or	r20, r24
    189a:	48 bb       	out	0x18, r20	; 24
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	08 95       	ret
    18a0:	25 b3       	in	r18, 0x15	; 21
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	06 2e       	mov	r0, r22
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <DIO_enuSetPinValue+0x88>
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	0a 94       	dec	r0
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <DIO_enuSetPinValue+0x84>
    18b2:	80 95       	com	r24
    18b4:	82 23       	and	r24, r18
    18b6:	85 bb       	out	0x15, r24	; 21
    18b8:	85 b3       	in	r24, 0x15	; 21
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <DIO_enuSetPinValue+0x9c>
    18be:	44 0f       	add	r20, r20
    18c0:	55 1f       	adc	r21, r21
    18c2:	6a 95       	dec	r22
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <DIO_enuSetPinValue+0x98>
    18c6:	48 2b       	or	r20, r24
    18c8:	45 bb       	out	0x15, r20	; 21
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	08 95       	ret
    18ce:	22 b3       	in	r18, 0x12	; 18
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	06 2e       	mov	r0, r22
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_enuSetPinValue+0xb6>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_enuSetPinValue+0xb2>
    18e0:	80 95       	com	r24
    18e2:	82 23       	and	r24, r18
    18e4:	82 bb       	out	0x12, r24	; 18
    18e6:	82 b3       	in	r24, 0x12	; 18
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_enuSetPinValue+0xca>
    18ec:	44 0f       	add	r20, r20
    18ee:	55 1f       	adc	r21, r21
    18f0:	6a 95       	dec	r22
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_enuSetPinValue+0xc6>
    18f4:	48 2b       	or	r20, r24
    18f6:	42 bb       	out	0x12, r20	; 18
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	08 95       	ret
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	08 95       	ret
    1900:	84 e0       	ldi	r24, 0x04	; 4
    1902:	08 95       	ret
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	08 95       	ret

00001908 <DIO_enuGetPinValue>:

ErrorStates_t DIO_enuGetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 *Copy_uint8Value){
	ErrorStates_t Local_enuErrorState = ES_NOK;

	if(Copy_uint8PortID <= DIO_PORTD){
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	e8 f5       	brcc	.+122    	; 0x1986 <DIO_enuGetPinValue+0x7e>
			if(Copy_uint8PinID <= DIO_PIN7){
    190c:	68 30       	cpi	r22, 0x08	; 8
    190e:	e8 f5       	brcc	.+122    	; 0x198a <DIO_enuGetPinValue+0x82>
				if(Copy_uint8Value != NULL){
    1910:	41 15       	cp	r20, r1
    1912:	51 05       	cpc	r21, r1
    1914:	e1 f1       	breq	.+120    	; 0x198e <DIO_enuGetPinValue+0x86>
					switch(Copy_uint8PortID){
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	91 f0       	breq	.+36     	; 0x193e <DIO_enuGetPinValue+0x36>
    191a:	28 f0       	brcs	.+10     	; 0x1926 <DIO_enuGetPinValue+0x1e>
    191c:	82 30       	cpi	r24, 0x02	; 2
    191e:	d9 f0       	breq	.+54     	; 0x1956 <DIO_enuGetPinValue+0x4e>
    1920:	83 30       	cpi	r24, 0x03	; 3
    1922:	29 f1       	breq	.+74     	; 0x196e <DIO_enuGetPinValue+0x66>
    1924:	36 c0       	rjmp	.+108    	; 0x1992 <DIO_enuGetPinValue+0x8a>
						case DIO_PORTA:
							*Copy_uint8Value = BIT_MASK & (PINA >> Copy_uint8PinID);
    1926:	89 b3       	in	r24, 0x19	; 25
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_enuGetPinValue+0x28>
    192c:	95 95       	asr	r25
    192e:	87 95       	ror	r24
    1930:	6a 95       	dec	r22
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_enuGetPinValue+0x24>
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	fa 01       	movw	r30, r20
    1938:	80 83       	st	Z, r24
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
							break;
					}
					Local_enuErrorState = ES_OK;
    193a:	80 e0       	ldi	r24, 0x00	; 0
			if(Copy_uint8PinID <= DIO_PIN7){
				if(Copy_uint8Value != NULL){
					switch(Copy_uint8PortID){
						case DIO_PORTA:
							*Copy_uint8Value = BIT_MASK & (PINA >> Copy_uint8PinID);
							break;
    193c:	08 95       	ret
						case DIO_PORTB:
							*Copy_uint8Value = BIT_MASK & (PINB >> Copy_uint8PinID);
    193e:	86 b3       	in	r24, 0x16	; 22
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_enuGetPinValue+0x40>
    1944:	95 95       	asr	r25
    1946:	87 95       	ror	r24
    1948:	6a 95       	dec	r22
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_enuGetPinValue+0x3c>
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	fa 01       	movw	r30, r20
    1950:	80 83       	st	Z, r24
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
							break;
					}
					Local_enuErrorState = ES_OK;
    1952:	80 e0       	ldi	r24, 0x00	; 0
						case DIO_PORTA:
							*Copy_uint8Value = BIT_MASK & (PINA >> Copy_uint8PinID);
							break;
						case DIO_PORTB:
							*Copy_uint8Value = BIT_MASK & (PINB >> Copy_uint8PinID);
							break;
    1954:	08 95       	ret
						case DIO_PORTC:
							*Copy_uint8Value = BIT_MASK & (PINC >> Copy_uint8PinID);
    1956:	83 b3       	in	r24, 0x13	; 19
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_enuGetPinValue+0x58>
    195c:	95 95       	asr	r25
    195e:	87 95       	ror	r24
    1960:	6a 95       	dec	r22
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_enuGetPinValue+0x54>
    1964:	81 70       	andi	r24, 0x01	; 1
    1966:	fa 01       	movw	r30, r20
    1968:	80 83       	st	Z, r24
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
							break;
					}
					Local_enuErrorState = ES_OK;
    196a:	80 e0       	ldi	r24, 0x00	; 0
						case DIO_PORTB:
							*Copy_uint8Value = BIT_MASK & (PINB >> Copy_uint8PinID);
							break;
						case DIO_PORTC:
							*Copy_uint8Value = BIT_MASK & (PINC >> Copy_uint8PinID);
							break;
    196c:	08 95       	ret
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
    196e:	80 b3       	in	r24, 0x10	; 16
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_enuGetPinValue+0x70>
    1974:	95 95       	asr	r25
    1976:	87 95       	ror	r24
    1978:	6a 95       	dec	r22
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_enuGetPinValue+0x6c>
    197c:	81 70       	andi	r24, 0x01	; 1
    197e:	fa 01       	movw	r30, r20
    1980:	80 83       	st	Z, r24
							break;
					}
					Local_enuErrorState = ES_OK;
    1982:	80 e0       	ldi	r24, 0x00	; 0
						case DIO_PORTC:
							*Copy_uint8Value = BIT_MASK & (PINC >> Copy_uint8PinID);
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
							break;
    1984:	08 95       	ret
			else{
				Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
			}
		}
		else{
			Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
    1986:	83 e0       	ldi	r24, 0x03	; 3
    1988:	08 95       	ret
				else{
					Local_enuErrorState = ES_NULL_POINTER;
				}
			}
			else{
				Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
    198a:	84 e0       	ldi	r24, 0x04	; 4
    198c:	08 95       	ret
							break;
					}
					Local_enuErrorState = ES_OK;
				}
				else{
					Local_enuErrorState = ES_NULL_POINTER;
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	08 95       	ret
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
							break;
					}
					Local_enuErrorState = ES_OK;
    1992:	80 e0       	ldi	r24, 0x00	; 0
			Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
		}


	return Local_enuErrorState;
}
    1994:	08 95       	ret

00001996 <__subsf3>:
    1996:	50 58       	subi	r21, 0x80	; 128

00001998 <__addsf3>:
    1998:	bb 27       	eor	r27, r27
    199a:	aa 27       	eor	r26, r26
    199c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__addsf3x>
    19a0:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_round>
    19a4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__fp_pscA>
    19a8:	38 f0       	brcs	.+14     	; 0x19b8 <__addsf3+0x20>
    19aa:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__fp_pscB>
    19ae:	20 f0       	brcs	.+8      	; 0x19b8 <__addsf3+0x20>
    19b0:	39 f4       	brne	.+14     	; 0x19c0 <__addsf3+0x28>
    19b2:	9f 3f       	cpi	r25, 0xFF	; 255
    19b4:	19 f4       	brne	.+6      	; 0x19bc <__addsf3+0x24>
    19b6:	26 f4       	brtc	.+8      	; 0x19c0 <__addsf3+0x28>
    19b8:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__fp_nan>
    19bc:	0e f4       	brtc	.+2      	; 0x19c0 <__addsf3+0x28>
    19be:	e0 95       	com	r30
    19c0:	e7 fb       	bst	r30, 7
    19c2:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__fp_inf>

000019c6 <__addsf3x>:
    19c6:	e9 2f       	mov	r30, r25
    19c8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__fp_split3>
    19cc:	58 f3       	brcs	.-42     	; 0x19a4 <__addsf3+0xc>
    19ce:	ba 17       	cp	r27, r26
    19d0:	62 07       	cpc	r22, r18
    19d2:	73 07       	cpc	r23, r19
    19d4:	84 07       	cpc	r24, r20
    19d6:	95 07       	cpc	r25, r21
    19d8:	20 f0       	brcs	.+8      	; 0x19e2 <__addsf3x+0x1c>
    19da:	79 f4       	brne	.+30     	; 0x19fa <__addsf3x+0x34>
    19dc:	a6 f5       	brtc	.+104    	; 0x1a46 <__addsf3x+0x80>
    19de:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <__fp_zero>
    19e2:	0e f4       	brtc	.+2      	; 0x19e6 <__addsf3x+0x20>
    19e4:	e0 95       	com	r30
    19e6:	0b 2e       	mov	r0, r27
    19e8:	ba 2f       	mov	r27, r26
    19ea:	a0 2d       	mov	r26, r0
    19ec:	0b 01       	movw	r0, r22
    19ee:	b9 01       	movw	r22, r18
    19f0:	90 01       	movw	r18, r0
    19f2:	0c 01       	movw	r0, r24
    19f4:	ca 01       	movw	r24, r20
    19f6:	a0 01       	movw	r20, r0
    19f8:	11 24       	eor	r1, r1
    19fa:	ff 27       	eor	r31, r31
    19fc:	59 1b       	sub	r21, r25
    19fe:	99 f0       	breq	.+38     	; 0x1a26 <__addsf3x+0x60>
    1a00:	59 3f       	cpi	r21, 0xF9	; 249
    1a02:	50 f4       	brcc	.+20     	; 0x1a18 <__addsf3x+0x52>
    1a04:	50 3e       	cpi	r21, 0xE0	; 224
    1a06:	68 f1       	brcs	.+90     	; 0x1a62 <__addsf3x+0x9c>
    1a08:	1a 16       	cp	r1, r26
    1a0a:	f0 40       	sbci	r31, 0x00	; 0
    1a0c:	a2 2f       	mov	r26, r18
    1a0e:	23 2f       	mov	r18, r19
    1a10:	34 2f       	mov	r19, r20
    1a12:	44 27       	eor	r20, r20
    1a14:	58 5f       	subi	r21, 0xF8	; 248
    1a16:	f3 cf       	rjmp	.-26     	; 0x19fe <__addsf3x+0x38>
    1a18:	46 95       	lsr	r20
    1a1a:	37 95       	ror	r19
    1a1c:	27 95       	ror	r18
    1a1e:	a7 95       	ror	r26
    1a20:	f0 40       	sbci	r31, 0x00	; 0
    1a22:	53 95       	inc	r21
    1a24:	c9 f7       	brne	.-14     	; 0x1a18 <__addsf3x+0x52>
    1a26:	7e f4       	brtc	.+30     	; 0x1a46 <__addsf3x+0x80>
    1a28:	1f 16       	cp	r1, r31
    1a2a:	ba 0b       	sbc	r27, r26
    1a2c:	62 0b       	sbc	r22, r18
    1a2e:	73 0b       	sbc	r23, r19
    1a30:	84 0b       	sbc	r24, r20
    1a32:	ba f0       	brmi	.+46     	; 0x1a62 <__addsf3x+0x9c>
    1a34:	91 50       	subi	r25, 0x01	; 1
    1a36:	a1 f0       	breq	.+40     	; 0x1a60 <__addsf3x+0x9a>
    1a38:	ff 0f       	add	r31, r31
    1a3a:	bb 1f       	adc	r27, r27
    1a3c:	66 1f       	adc	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	c2 f7       	brpl	.-16     	; 0x1a34 <__addsf3x+0x6e>
    1a44:	0e c0       	rjmp	.+28     	; 0x1a62 <__addsf3x+0x9c>
    1a46:	ba 0f       	add	r27, r26
    1a48:	62 1f       	adc	r22, r18
    1a4a:	73 1f       	adc	r23, r19
    1a4c:	84 1f       	adc	r24, r20
    1a4e:	48 f4       	brcc	.+18     	; 0x1a62 <__addsf3x+0x9c>
    1a50:	87 95       	ror	r24
    1a52:	77 95       	ror	r23
    1a54:	67 95       	ror	r22
    1a56:	b7 95       	ror	r27
    1a58:	f7 95       	ror	r31
    1a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a5c:	08 f0       	brcs	.+2      	; 0x1a60 <__addsf3x+0x9a>
    1a5e:	b0 cf       	rjmp	.-160    	; 0x19c0 <__addsf3+0x28>
    1a60:	93 95       	inc	r25
    1a62:	88 0f       	add	r24, r24
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <__addsf3x+0xa2>
    1a66:	99 27       	eor	r25, r25
    1a68:	ee 0f       	add	r30, r30
    1a6a:	97 95       	ror	r25
    1a6c:	87 95       	ror	r24
    1a6e:	08 95       	ret

00001a70 <__cmpsf2>:
    1a70:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__fp_cmp>
    1a74:	08 f4       	brcc	.+2      	; 0x1a78 <__cmpsf2+0x8>
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	08 95       	ret

00001a7a <__divsf3>:
    1a7a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divsf3x>
    1a7e:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_round>
    1a82:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__fp_pscB>
    1a86:	58 f0       	brcs	.+22     	; 0x1a9e <__divsf3+0x24>
    1a88:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__fp_pscA>
    1a8c:	40 f0       	brcs	.+16     	; 0x1a9e <__divsf3+0x24>
    1a8e:	29 f4       	brne	.+10     	; 0x1a9a <__divsf3+0x20>
    1a90:	5f 3f       	cpi	r21, 0xFF	; 255
    1a92:	29 f0       	breq	.+10     	; 0x1a9e <__divsf3+0x24>
    1a94:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__fp_inf>
    1a98:	51 11       	cpse	r21, r1
    1a9a:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__fp_szero>
    1a9e:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__fp_nan>

00001aa2 <__divsf3x>:
    1aa2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__fp_split3>
    1aa6:	68 f3       	brcs	.-38     	; 0x1a82 <__divsf3+0x8>

00001aa8 <__divsf3_pse>:
    1aa8:	99 23       	and	r25, r25
    1aaa:	b1 f3       	breq	.-20     	; 0x1a98 <__divsf3+0x1e>
    1aac:	55 23       	and	r21, r21
    1aae:	91 f3       	breq	.-28     	; 0x1a94 <__divsf3+0x1a>
    1ab0:	95 1b       	sub	r25, r21
    1ab2:	55 0b       	sbc	r21, r21
    1ab4:	bb 27       	eor	r27, r27
    1ab6:	aa 27       	eor	r26, r26
    1ab8:	62 17       	cp	r22, r18
    1aba:	73 07       	cpc	r23, r19
    1abc:	84 07       	cpc	r24, r20
    1abe:	38 f0       	brcs	.+14     	; 0x1ace <__divsf3_pse+0x26>
    1ac0:	9f 5f       	subi	r25, 0xFF	; 255
    1ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac4:	22 0f       	add	r18, r18
    1ac6:	33 1f       	adc	r19, r19
    1ac8:	44 1f       	adc	r20, r20
    1aca:	aa 1f       	adc	r26, r26
    1acc:	a9 f3       	breq	.-22     	; 0x1ab8 <__divsf3_pse+0x10>
    1ace:	35 d0       	rcall	.+106    	; 0x1b3a <__divsf3_pse+0x92>
    1ad0:	0e 2e       	mov	r0, r30
    1ad2:	3a f0       	brmi	.+14     	; 0x1ae2 <__divsf3_pse+0x3a>
    1ad4:	e0 e8       	ldi	r30, 0x80	; 128
    1ad6:	32 d0       	rcall	.+100    	; 0x1b3c <__divsf3_pse+0x94>
    1ad8:	91 50       	subi	r25, 0x01	; 1
    1ada:	50 40       	sbci	r21, 0x00	; 0
    1adc:	e6 95       	lsr	r30
    1ade:	00 1c       	adc	r0, r0
    1ae0:	ca f7       	brpl	.-14     	; 0x1ad4 <__divsf3_pse+0x2c>
    1ae2:	2b d0       	rcall	.+86     	; 0x1b3a <__divsf3_pse+0x92>
    1ae4:	fe 2f       	mov	r31, r30
    1ae6:	29 d0       	rcall	.+82     	; 0x1b3a <__divsf3_pse+0x92>
    1ae8:	66 0f       	add	r22, r22
    1aea:	77 1f       	adc	r23, r23
    1aec:	88 1f       	adc	r24, r24
    1aee:	bb 1f       	adc	r27, r27
    1af0:	26 17       	cp	r18, r22
    1af2:	37 07       	cpc	r19, r23
    1af4:	48 07       	cpc	r20, r24
    1af6:	ab 07       	cpc	r26, r27
    1af8:	b0 e8       	ldi	r27, 0x80	; 128
    1afa:	09 f0       	breq	.+2      	; 0x1afe <__divsf3_pse+0x56>
    1afc:	bb 0b       	sbc	r27, r27
    1afe:	80 2d       	mov	r24, r0
    1b00:	bf 01       	movw	r22, r30
    1b02:	ff 27       	eor	r31, r31
    1b04:	93 58       	subi	r25, 0x83	; 131
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	3a f0       	brmi	.+14     	; 0x1b18 <__divsf3_pse+0x70>
    1b0a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b0c:	51 05       	cpc	r21, r1
    1b0e:	78 f0       	brcs	.+30     	; 0x1b2e <__divsf3_pse+0x86>
    1b10:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__fp_inf>
    1b14:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__fp_szero>
    1b18:	5f 3f       	cpi	r21, 0xFF	; 255
    1b1a:	e4 f3       	brlt	.-8      	; 0x1b14 <__divsf3_pse+0x6c>
    1b1c:	98 3e       	cpi	r25, 0xE8	; 232
    1b1e:	d4 f3       	brlt	.-12     	; 0x1b14 <__divsf3_pse+0x6c>
    1b20:	86 95       	lsr	r24
    1b22:	77 95       	ror	r23
    1b24:	67 95       	ror	r22
    1b26:	b7 95       	ror	r27
    1b28:	f7 95       	ror	r31
    1b2a:	9f 5f       	subi	r25, 0xFF	; 255
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__divsf3_pse+0x78>
    1b2e:	88 0f       	add	r24, r24
    1b30:	91 1d       	adc	r25, r1
    1b32:	96 95       	lsr	r25
    1b34:	87 95       	ror	r24
    1b36:	97 f9       	bld	r25, 7
    1b38:	08 95       	ret
    1b3a:	e1 e0       	ldi	r30, 0x01	; 1
    1b3c:	66 0f       	add	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	88 1f       	adc	r24, r24
    1b42:	bb 1f       	adc	r27, r27
    1b44:	62 17       	cp	r22, r18
    1b46:	73 07       	cpc	r23, r19
    1b48:	84 07       	cpc	r24, r20
    1b4a:	ba 07       	cpc	r27, r26
    1b4c:	20 f0       	brcs	.+8      	; 0x1b56 <__divsf3_pse+0xae>
    1b4e:	62 1b       	sub	r22, r18
    1b50:	73 0b       	sbc	r23, r19
    1b52:	84 0b       	sbc	r24, r20
    1b54:	ba 0b       	sbc	r27, r26
    1b56:	ee 1f       	adc	r30, r30
    1b58:	88 f7       	brcc	.-30     	; 0x1b3c <__divsf3_pse+0x94>
    1b5a:	e0 95       	com	r30
    1b5c:	08 95       	ret

00001b5e <__fixsfdi>:
    1b5e:	be e3       	ldi	r27, 0x3E	; 62
    1b60:	04 d0       	rcall	.+8      	; 0x1b6a <__fixunssfdi+0x2>
    1b62:	08 f4       	brcc	.+2      	; 0x1b66 <__fixsfdi+0x8>
    1b64:	90 e8       	ldi	r25, 0x80	; 128
    1b66:	08 95       	ret

00001b68 <__fixunssfdi>:
    1b68:	bf e3       	ldi	r27, 0x3F	; 63
    1b6a:	22 27       	eor	r18, r18
    1b6c:	33 27       	eor	r19, r19
    1b6e:	a9 01       	movw	r20, r18
    1b70:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__fp_splitA>
    1b74:	60 f1       	brcs	.+88     	; 0x1bce <__fixunssfdi+0x66>
    1b76:	9f 57       	subi	r25, 0x7F	; 127
    1b78:	48 f1       	brcs	.+82     	; 0x1bcc <__fixunssfdi+0x64>
    1b7a:	b9 17       	cp	r27, r25
    1b7c:	40 f1       	brcs	.+80     	; 0x1bce <__fixunssfdi+0x66>
    1b7e:	bf e3       	ldi	r27, 0x3F	; 63
    1b80:	b9 1b       	sub	r27, r25
    1b82:	99 27       	eor	r25, r25
    1b84:	b8 50       	subi	r27, 0x08	; 8
    1b86:	3a f4       	brpl	.+14     	; 0x1b96 <__fixunssfdi+0x2e>
    1b88:	66 0f       	add	r22, r22
    1b8a:	77 1f       	adc	r23, r23
    1b8c:	88 1f       	adc	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	b3 95       	inc	r27
    1b92:	d2 f3       	brmi	.-12     	; 0x1b88 <__fixunssfdi+0x20>
    1b94:	16 c0       	rjmp	.+44     	; 0x1bc2 <__fixunssfdi+0x5a>
    1b96:	b8 50       	subi	r27, 0x08	; 8
    1b98:	4a f0       	brmi	.+18     	; 0x1bac <__fixunssfdi+0x44>
    1b9a:	23 2f       	mov	r18, r19
    1b9c:	34 2f       	mov	r19, r20
    1b9e:	45 2f       	mov	r20, r21
    1ba0:	56 2f       	mov	r21, r22
    1ba2:	67 2f       	mov	r22, r23
    1ba4:	78 2f       	mov	r23, r24
    1ba6:	88 27       	eor	r24, r24
    1ba8:	b8 50       	subi	r27, 0x08	; 8
    1baa:	ba f7       	brpl	.-18     	; 0x1b9a <__fixunssfdi+0x32>
    1bac:	b8 5f       	subi	r27, 0xF8	; 248
    1bae:	49 f0       	breq	.+18     	; 0x1bc2 <__fixunssfdi+0x5a>
    1bb0:	86 95       	lsr	r24
    1bb2:	77 95       	ror	r23
    1bb4:	67 95       	ror	r22
    1bb6:	57 95       	ror	r21
    1bb8:	47 95       	ror	r20
    1bba:	37 95       	ror	r19
    1bbc:	27 95       	ror	r18
    1bbe:	ba 95       	dec	r27
    1bc0:	b9 f7       	brne	.-18     	; 0x1bb0 <__fixunssfdi+0x48>
    1bc2:	16 f4       	brtc	.+4      	; 0x1bc8 <__fixunssfdi+0x60>
    1bc4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__fp_negdi>
    1bc8:	88 94       	clc
    1bca:	08 95       	ret
    1bcc:	88 94       	clc
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	08 95       	ret

00001bd6 <__floatdisf>:
    1bd6:	97 fb       	bst	r25, 7
    1bd8:	16 f4       	brtc	.+4      	; 0x1bde <__floatdisf+0x8>
    1bda:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__fp_negdi>
    1bde:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__fp_di2sf>

00001be2 <__floatunsisf>:
    1be2:	e8 94       	clt
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <__floatsisf+0x12>

00001be6 <__floatsisf>:
    1be6:	97 fb       	bst	r25, 7
    1be8:	3e f4       	brtc	.+14     	; 0x1bf8 <__floatsisf+0x12>
    1bea:	90 95       	com	r25
    1bec:	80 95       	com	r24
    1bee:	70 95       	com	r23
    1bf0:	61 95       	neg	r22
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	99 23       	and	r25, r25
    1bfa:	a9 f0       	breq	.+42     	; 0x1c26 <__floatsisf+0x40>
    1bfc:	f9 2f       	mov	r31, r25
    1bfe:	96 e9       	ldi	r25, 0x96	; 150
    1c00:	bb 27       	eor	r27, r27
    1c02:	93 95       	inc	r25
    1c04:	f6 95       	lsr	r31
    1c06:	87 95       	ror	r24
    1c08:	77 95       	ror	r23
    1c0a:	67 95       	ror	r22
    1c0c:	b7 95       	ror	r27
    1c0e:	f1 11       	cpse	r31, r1
    1c10:	f8 cf       	rjmp	.-16     	; 0x1c02 <__floatsisf+0x1c>
    1c12:	fa f4       	brpl	.+62     	; 0x1c52 <__floatsisf+0x6c>
    1c14:	bb 0f       	add	r27, r27
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <__floatsisf+0x36>
    1c18:	60 ff       	sbrs	r22, 0
    1c1a:	1b c0       	rjmp	.+54     	; 0x1c52 <__floatsisf+0x6c>
    1c1c:	6f 5f       	subi	r22, 0xFF	; 255
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	8f 4f       	sbci	r24, 0xFF	; 255
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	16 c0       	rjmp	.+44     	; 0x1c52 <__floatsisf+0x6c>
    1c26:	88 23       	and	r24, r24
    1c28:	11 f0       	breq	.+4      	; 0x1c2e <__floatsisf+0x48>
    1c2a:	96 e9       	ldi	r25, 0x96	; 150
    1c2c:	11 c0       	rjmp	.+34     	; 0x1c50 <__floatsisf+0x6a>
    1c2e:	77 23       	and	r23, r23
    1c30:	21 f0       	breq	.+8      	; 0x1c3a <__floatsisf+0x54>
    1c32:	9e e8       	ldi	r25, 0x8E	; 142
    1c34:	87 2f       	mov	r24, r23
    1c36:	76 2f       	mov	r23, r22
    1c38:	05 c0       	rjmp	.+10     	; 0x1c44 <__floatsisf+0x5e>
    1c3a:	66 23       	and	r22, r22
    1c3c:	71 f0       	breq	.+28     	; 0x1c5a <__floatsisf+0x74>
    1c3e:	96 e8       	ldi	r25, 0x86	; 134
    1c40:	86 2f       	mov	r24, r22
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	2a f0       	brmi	.+10     	; 0x1c52 <__floatsisf+0x6c>
    1c48:	9a 95       	dec	r25
    1c4a:	66 0f       	add	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	88 1f       	adc	r24, r24
    1c50:	da f7       	brpl	.-10     	; 0x1c48 <__floatsisf+0x62>
    1c52:	88 0f       	add	r24, r24
    1c54:	96 95       	lsr	r25
    1c56:	87 95       	ror	r24
    1c58:	97 f9       	bld	r25, 7
    1c5a:	08 95       	ret

00001c5c <__floatundisf>:
    1c5c:	e8 94       	clt

00001c5e <__fp_di2sf>:
    1c5e:	f9 2f       	mov	r31, r25
    1c60:	96 eb       	ldi	r25, 0xB6	; 182
    1c62:	ff 23       	and	r31, r31
    1c64:	81 f0       	breq	.+32     	; 0x1c86 <__fp_di2sf+0x28>
    1c66:	12 16       	cp	r1, r18
    1c68:	13 06       	cpc	r1, r19
    1c6a:	14 06       	cpc	r1, r20
    1c6c:	44 0b       	sbc	r20, r20
    1c6e:	93 95       	inc	r25
    1c70:	f6 95       	lsr	r31
    1c72:	87 95       	ror	r24
    1c74:	77 95       	ror	r23
    1c76:	67 95       	ror	r22
    1c78:	57 95       	ror	r21
    1c7a:	40 40       	sbci	r20, 0x00	; 0
    1c7c:	ff 23       	and	r31, r31
    1c7e:	b9 f7       	brne	.-18     	; 0x1c6e <__fp_di2sf+0x10>
    1c80:	1b c0       	rjmp	.+54     	; 0x1cb8 <__fp_di2sf+0x5a>
    1c82:	99 27       	eor	r25, r25
    1c84:	08 95       	ret
    1c86:	88 23       	and	r24, r24
    1c88:	51 f4       	brne	.+20     	; 0x1c9e <__fp_di2sf+0x40>
    1c8a:	98 50       	subi	r25, 0x08	; 8
    1c8c:	d2 f7       	brpl	.-12     	; 0x1c82 <__fp_di2sf+0x24>
    1c8e:	87 2b       	or	r24, r23
    1c90:	76 2f       	mov	r23, r22
    1c92:	65 2f       	mov	r22, r21
    1c94:	54 2f       	mov	r21, r20
    1c96:	43 2f       	mov	r20, r19
    1c98:	32 2f       	mov	r19, r18
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	b1 f3       	breq	.-20     	; 0x1c8a <__fp_di2sf+0x2c>
    1c9e:	12 16       	cp	r1, r18
    1ca0:	13 06       	cpc	r1, r19
    1ca2:	14 06       	cpc	r1, r20
    1ca4:	44 0b       	sbc	r20, r20
    1ca6:	88 23       	and	r24, r24
    1ca8:	3a f0       	brmi	.+14     	; 0x1cb8 <__fp_di2sf+0x5a>
    1caa:	9a 95       	dec	r25
    1cac:	44 0f       	add	r20, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	66 1f       	adc	r22, r22
    1cb2:	77 1f       	adc	r23, r23
    1cb4:	88 1f       	adc	r24, r24
    1cb6:	ca f7       	brpl	.-14     	; 0x1caa <__fp_di2sf+0x4c>
    1cb8:	55 23       	and	r21, r21
    1cba:	4a f4       	brpl	.+18     	; 0x1cce <__fp_di2sf+0x70>
    1cbc:	44 0f       	add	r20, r20
    1cbe:	55 1f       	adc	r21, r21
    1cc0:	11 f4       	brne	.+4      	; 0x1cc6 <__fp_di2sf+0x68>
    1cc2:	60 ff       	sbrs	r22, 0
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <__fp_di2sf+0x70>
    1cc6:	6f 5f       	subi	r22, 0xFF	; 255
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	88 0f       	add	r24, r24
    1cd0:	96 95       	lsr	r25
    1cd2:	87 95       	ror	r24
    1cd4:	97 f9       	bld	r25, 7
    1cd6:	08 95       	ret

00001cd8 <__fp_cmp>:
    1cd8:	99 0f       	add	r25, r25
    1cda:	00 08       	sbc	r0, r0
    1cdc:	55 0f       	add	r21, r21
    1cde:	aa 0b       	sbc	r26, r26
    1ce0:	e0 e8       	ldi	r30, 0x80	; 128
    1ce2:	fe ef       	ldi	r31, 0xFE	; 254
    1ce4:	16 16       	cp	r1, r22
    1ce6:	17 06       	cpc	r1, r23
    1ce8:	e8 07       	cpc	r30, r24
    1cea:	f9 07       	cpc	r31, r25
    1cec:	c0 f0       	brcs	.+48     	; 0x1d1e <__fp_cmp+0x46>
    1cee:	12 16       	cp	r1, r18
    1cf0:	13 06       	cpc	r1, r19
    1cf2:	e4 07       	cpc	r30, r20
    1cf4:	f5 07       	cpc	r31, r21
    1cf6:	98 f0       	brcs	.+38     	; 0x1d1e <__fp_cmp+0x46>
    1cf8:	62 1b       	sub	r22, r18
    1cfa:	73 0b       	sbc	r23, r19
    1cfc:	84 0b       	sbc	r24, r20
    1cfe:	95 0b       	sbc	r25, r21
    1d00:	39 f4       	brne	.+14     	; 0x1d10 <__fp_cmp+0x38>
    1d02:	0a 26       	eor	r0, r26
    1d04:	61 f0       	breq	.+24     	; 0x1d1e <__fp_cmp+0x46>
    1d06:	23 2b       	or	r18, r19
    1d08:	24 2b       	or	r18, r20
    1d0a:	25 2b       	or	r18, r21
    1d0c:	21 f4       	brne	.+8      	; 0x1d16 <__fp_cmp+0x3e>
    1d0e:	08 95       	ret
    1d10:	0a 26       	eor	r0, r26
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <__fp_cmp+0x3e>
    1d14:	a1 40       	sbci	r26, 0x01	; 1
    1d16:	a6 95       	lsr	r26
    1d18:	8f ef       	ldi	r24, 0xFF	; 255
    1d1a:	81 1d       	adc	r24, r1
    1d1c:	81 1d       	adc	r24, r1
    1d1e:	08 95       	ret

00001d20 <__fp_inf>:
    1d20:	97 f9       	bld	r25, 7
    1d22:	9f 67       	ori	r25, 0x7F	; 127
    1d24:	80 e8       	ldi	r24, 0x80	; 128
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	08 95       	ret

00001d2c <__fp_nan>:
    1d2c:	9f ef       	ldi	r25, 0xFF	; 255
    1d2e:	80 ec       	ldi	r24, 0xC0	; 192
    1d30:	08 95       	ret

00001d32 <__fp_negdi>:
    1d32:	90 95       	com	r25
    1d34:	80 95       	com	r24
    1d36:	70 95       	com	r23
    1d38:	60 95       	com	r22
    1d3a:	50 95       	com	r21
    1d3c:	40 95       	com	r20
    1d3e:	30 95       	com	r19
    1d40:	21 95       	neg	r18
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	4f 4f       	sbci	r20, 0xFF	; 255
    1d46:	5f 4f       	sbci	r21, 0xFF	; 255
    1d48:	6f 4f       	sbci	r22, 0xFF	; 255
    1d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	08 95       	ret

00001d52 <__fp_pscA>:
    1d52:	00 24       	eor	r0, r0
    1d54:	0a 94       	dec	r0
    1d56:	16 16       	cp	r1, r22
    1d58:	17 06       	cpc	r1, r23
    1d5a:	18 06       	cpc	r1, r24
    1d5c:	09 06       	cpc	r0, r25
    1d5e:	08 95       	ret

00001d60 <__fp_pscB>:
    1d60:	00 24       	eor	r0, r0
    1d62:	0a 94       	dec	r0
    1d64:	12 16       	cp	r1, r18
    1d66:	13 06       	cpc	r1, r19
    1d68:	14 06       	cpc	r1, r20
    1d6a:	05 06       	cpc	r0, r21
    1d6c:	08 95       	ret

00001d6e <__fp_round>:
    1d6e:	09 2e       	mov	r0, r25
    1d70:	03 94       	inc	r0
    1d72:	00 0c       	add	r0, r0
    1d74:	11 f4       	brne	.+4      	; 0x1d7a <__fp_round+0xc>
    1d76:	88 23       	and	r24, r24
    1d78:	52 f0       	brmi	.+20     	; 0x1d8e <__fp_round+0x20>
    1d7a:	bb 0f       	add	r27, r27
    1d7c:	40 f4       	brcc	.+16     	; 0x1d8e <__fp_round+0x20>
    1d7e:	bf 2b       	or	r27, r31
    1d80:	11 f4       	brne	.+4      	; 0x1d86 <__fp_round+0x18>
    1d82:	60 ff       	sbrs	r22, 0
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <__fp_round+0x20>
    1d86:	6f 5f       	subi	r22, 0xFF	; 255
    1d88:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8e:	08 95       	ret

00001d90 <__fp_split3>:
    1d90:	57 fd       	sbrc	r21, 7
    1d92:	90 58       	subi	r25, 0x80	; 128
    1d94:	44 0f       	add	r20, r20
    1d96:	55 1f       	adc	r21, r21
    1d98:	59 f0       	breq	.+22     	; 0x1db0 <__fp_splitA+0x10>
    1d9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9c:	71 f0       	breq	.+28     	; 0x1dba <__fp_splitA+0x1a>
    1d9e:	47 95       	ror	r20

00001da0 <__fp_splitA>:
    1da0:	88 0f       	add	r24, r24
    1da2:	97 fb       	bst	r25, 7
    1da4:	99 1f       	adc	r25, r25
    1da6:	61 f0       	breq	.+24     	; 0x1dc0 <__fp_splitA+0x20>
    1da8:	9f 3f       	cpi	r25, 0xFF	; 255
    1daa:	79 f0       	breq	.+30     	; 0x1dca <__fp_splitA+0x2a>
    1dac:	87 95       	ror	r24
    1dae:	08 95       	ret
    1db0:	12 16       	cp	r1, r18
    1db2:	13 06       	cpc	r1, r19
    1db4:	14 06       	cpc	r1, r20
    1db6:	55 1f       	adc	r21, r21
    1db8:	f2 cf       	rjmp	.-28     	; 0x1d9e <__fp_split3+0xe>
    1dba:	46 95       	lsr	r20
    1dbc:	f1 df       	rcall	.-30     	; 0x1da0 <__fp_splitA>
    1dbe:	08 c0       	rjmp	.+16     	; 0x1dd0 <__fp_splitA+0x30>
    1dc0:	16 16       	cp	r1, r22
    1dc2:	17 06       	cpc	r1, r23
    1dc4:	18 06       	cpc	r1, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	f1 cf       	rjmp	.-30     	; 0x1dac <__fp_splitA+0xc>
    1dca:	86 95       	lsr	r24
    1dcc:	71 05       	cpc	r23, r1
    1dce:	61 05       	cpc	r22, r1
    1dd0:	08 94       	sec
    1dd2:	08 95       	ret

00001dd4 <__fp_zero>:
    1dd4:	e8 94       	clt

00001dd6 <__fp_szero>:
    1dd6:	bb 27       	eor	r27, r27
    1dd8:	66 27       	eor	r22, r22
    1dda:	77 27       	eor	r23, r23
    1ddc:	cb 01       	movw	r24, r22
    1dde:	97 f9       	bld	r25, 7
    1de0:	08 95       	ret

00001de2 <__mulsf3>:
    1de2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3x>
    1de6:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_round>
    1dea:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__fp_pscA>
    1dee:	38 f0       	brcs	.+14     	; 0x1dfe <__mulsf3+0x1c>
    1df0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__fp_pscB>
    1df4:	20 f0       	brcs	.+8      	; 0x1dfe <__mulsf3+0x1c>
    1df6:	95 23       	and	r25, r21
    1df8:	11 f0       	breq	.+4      	; 0x1dfe <__mulsf3+0x1c>
    1dfa:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__fp_inf>
    1dfe:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__fp_nan>
    1e02:	11 24       	eor	r1, r1
    1e04:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__fp_szero>

00001e08 <__mulsf3x>:
    1e08:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__fp_split3>
    1e0c:	70 f3       	brcs	.-36     	; 0x1dea <__mulsf3+0x8>

00001e0e <__mulsf3_pse>:
    1e0e:	95 9f       	mul	r25, r21
    1e10:	c1 f3       	breq	.-16     	; 0x1e02 <__mulsf3+0x20>
    1e12:	95 0f       	add	r25, r21
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	55 1f       	adc	r21, r21
    1e18:	62 9f       	mul	r22, r18
    1e1a:	f0 01       	movw	r30, r0
    1e1c:	72 9f       	mul	r23, r18
    1e1e:	bb 27       	eor	r27, r27
    1e20:	f0 0d       	add	r31, r0
    1e22:	b1 1d       	adc	r27, r1
    1e24:	63 9f       	mul	r22, r19
    1e26:	aa 27       	eor	r26, r26
    1e28:	f0 0d       	add	r31, r0
    1e2a:	b1 1d       	adc	r27, r1
    1e2c:	aa 1f       	adc	r26, r26
    1e2e:	64 9f       	mul	r22, r20
    1e30:	66 27       	eor	r22, r22
    1e32:	b0 0d       	add	r27, r0
    1e34:	a1 1d       	adc	r26, r1
    1e36:	66 1f       	adc	r22, r22
    1e38:	82 9f       	mul	r24, r18
    1e3a:	22 27       	eor	r18, r18
    1e3c:	b0 0d       	add	r27, r0
    1e3e:	a1 1d       	adc	r26, r1
    1e40:	62 1f       	adc	r22, r18
    1e42:	73 9f       	mul	r23, r19
    1e44:	b0 0d       	add	r27, r0
    1e46:	a1 1d       	adc	r26, r1
    1e48:	62 1f       	adc	r22, r18
    1e4a:	83 9f       	mul	r24, r19
    1e4c:	a0 0d       	add	r26, r0
    1e4e:	61 1d       	adc	r22, r1
    1e50:	22 1f       	adc	r18, r18
    1e52:	74 9f       	mul	r23, r20
    1e54:	33 27       	eor	r19, r19
    1e56:	a0 0d       	add	r26, r0
    1e58:	61 1d       	adc	r22, r1
    1e5a:	23 1f       	adc	r18, r19
    1e5c:	84 9f       	mul	r24, r20
    1e5e:	60 0d       	add	r22, r0
    1e60:	21 1d       	adc	r18, r1
    1e62:	82 2f       	mov	r24, r18
    1e64:	76 2f       	mov	r23, r22
    1e66:	6a 2f       	mov	r22, r26
    1e68:	11 24       	eor	r1, r1
    1e6a:	9f 57       	subi	r25, 0x7F	; 127
    1e6c:	50 40       	sbci	r21, 0x00	; 0
    1e6e:	9a f0       	brmi	.+38     	; 0x1e96 <__mulsf3_pse+0x88>
    1e70:	f1 f0       	breq	.+60     	; 0x1eae <__mulsf3_pse+0xa0>
    1e72:	88 23       	and	r24, r24
    1e74:	4a f0       	brmi	.+18     	; 0x1e88 <__mulsf3_pse+0x7a>
    1e76:	ee 0f       	add	r30, r30
    1e78:	ff 1f       	adc	r31, r31
    1e7a:	bb 1f       	adc	r27, r27
    1e7c:	66 1f       	adc	r22, r22
    1e7e:	77 1f       	adc	r23, r23
    1e80:	88 1f       	adc	r24, r24
    1e82:	91 50       	subi	r25, 0x01	; 1
    1e84:	50 40       	sbci	r21, 0x00	; 0
    1e86:	a9 f7       	brne	.-22     	; 0x1e72 <__mulsf3_pse+0x64>
    1e88:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8a:	51 05       	cpc	r21, r1
    1e8c:	80 f0       	brcs	.+32     	; 0x1eae <__mulsf3_pse+0xa0>
    1e8e:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__fp_inf>
    1e92:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__fp_szero>
    1e96:	5f 3f       	cpi	r21, 0xFF	; 255
    1e98:	e4 f3       	brlt	.-8      	; 0x1e92 <__mulsf3_pse+0x84>
    1e9a:	98 3e       	cpi	r25, 0xE8	; 232
    1e9c:	d4 f3       	brlt	.-12     	; 0x1e92 <__mulsf3_pse+0x84>
    1e9e:	86 95       	lsr	r24
    1ea0:	77 95       	ror	r23
    1ea2:	67 95       	ror	r22
    1ea4:	b7 95       	ror	r27
    1ea6:	f7 95       	ror	r31
    1ea8:	e7 95       	ror	r30
    1eaa:	9f 5f       	subi	r25, 0xFF	; 255
    1eac:	c1 f7       	brne	.-16     	; 0x1e9e <__mulsf3_pse+0x90>
    1eae:	fe 2b       	or	r31, r30
    1eb0:	88 0f       	add	r24, r24
    1eb2:	91 1d       	adc	r25, r1
    1eb4:	96 95       	lsr	r25
    1eb6:	87 95       	ror	r24
    1eb8:	97 f9       	bld	r25, 7
    1eba:	08 95       	ret

00001ebc <__moddi3>:
    1ebc:	68 94       	set
    1ebe:	01 c0       	rjmp	.+2      	; 0x1ec2 <__divdi3_moddi3>

00001ec0 <__divdi3>:
    1ec0:	e8 94       	clt

00001ec2 <__divdi3_moddi3>:
    1ec2:	f9 2f       	mov	r31, r25
    1ec4:	f1 2b       	or	r31, r17
    1ec6:	12 f0       	brmi	.+4      	; 0x1ecc <__divdi3_moddi3+0xa>
    1ec8:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <__udivdi3_umoddi3>
    1ecc:	a0 e0       	ldi	r26, 0x00	; 0
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	ec e6       	ldi	r30, 0x6C	; 108
    1ed2:	ff e0       	ldi	r31, 0x0F	; 15
    1ed4:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__prologue_saves__+0xc>
    1ed8:	09 2e       	mov	r0, r25
    1eda:	05 94       	asr	r0
    1edc:	22 f4       	brpl	.+8      	; 0x1ee6 <__divdi3_moddi3+0x24>
    1ede:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__negdi2>
    1ee2:	11 23       	and	r17, r17
    1ee4:	92 f4       	brpl	.+36     	; 0x1f0a <__divdi3_moddi3+0x48>
    1ee6:	f0 e8       	ldi	r31, 0x80	; 128
    1ee8:	0f 26       	eor	r0, r31
    1eea:	ff ef       	ldi	r31, 0xFF	; 255
    1eec:	e0 94       	com	r14
    1eee:	f0 94       	com	r15
    1ef0:	00 95       	com	r16
    1ef2:	10 95       	com	r17
    1ef4:	b0 94       	com	r11
    1ef6:	c0 94       	com	r12
    1ef8:	d0 94       	com	r13
    1efa:	a1 94       	neg	r10
    1efc:	bf 0a       	sbc	r11, r31
    1efe:	cf 0a       	sbc	r12, r31
    1f00:	df 0a       	sbc	r13, r31
    1f02:	ef 0a       	sbc	r14, r31
    1f04:	ff 0a       	sbc	r15, r31
    1f06:	0f 0b       	sbc	r16, r31
    1f08:	1f 0b       	sbc	r17, r31
    1f0a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__udivmod64>
    1f0e:	07 fc       	sbrc	r0, 7
    1f10:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__negdi2>
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	ec e0       	ldi	r30, 0x0C	; 12
    1f1a:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__epilogue_restores__+0xc>

00001f1e <__umoddi3>:
    1f1e:	68 94       	set
    1f20:	01 c0       	rjmp	.+2      	; 0x1f24 <__udivdi3_umoddi3>

00001f22 <__udivdi3>:
    1f22:	e8 94       	clt

00001f24 <__udivdi3_umoddi3>:
    1f24:	8f 92       	push	r8
    1f26:	9f 92       	push	r9
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__udivmod64>
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	9f 90       	pop	r9
    1f36:	8f 90       	pop	r8
    1f38:	08 95       	ret

00001f3a <__udivmod64>:
    1f3a:	88 24       	eor	r8, r8
    1f3c:	99 24       	eor	r9, r9
    1f3e:	f4 01       	movw	r30, r8
    1f40:	e4 01       	movw	r28, r8
    1f42:	b0 e4       	ldi	r27, 0x40	; 64
    1f44:	9f 93       	push	r25
    1f46:	aa 27       	eor	r26, r26
    1f48:	9a 15       	cp	r25, r10
    1f4a:	8b 04       	cpc	r8, r11
    1f4c:	9c 04       	cpc	r9, r12
    1f4e:	ed 05       	cpc	r30, r13
    1f50:	fe 05       	cpc	r31, r14
    1f52:	cf 05       	cpc	r28, r15
    1f54:	d0 07       	cpc	r29, r16
    1f56:	a1 07       	cpc	r26, r17
    1f58:	98 f4       	brcc	.+38     	; 0x1f80 <__udivmod64+0x46>
    1f5a:	ad 2f       	mov	r26, r29
    1f5c:	dc 2f       	mov	r29, r28
    1f5e:	cf 2f       	mov	r28, r31
    1f60:	fe 2f       	mov	r31, r30
    1f62:	e9 2d       	mov	r30, r9
    1f64:	98 2c       	mov	r9, r8
    1f66:	89 2e       	mov	r8, r25
    1f68:	98 2f       	mov	r25, r24
    1f6a:	87 2f       	mov	r24, r23
    1f6c:	76 2f       	mov	r23, r22
    1f6e:	65 2f       	mov	r22, r21
    1f70:	54 2f       	mov	r21, r20
    1f72:	43 2f       	mov	r20, r19
    1f74:	32 2f       	mov	r19, r18
    1f76:	22 27       	eor	r18, r18
    1f78:	b8 50       	subi	r27, 0x08	; 8
    1f7a:	31 f7       	brne	.-52     	; 0x1f48 <__udivmod64+0xe>
    1f7c:	bf 91       	pop	r27
    1f7e:	27 c0       	rjmp	.+78     	; 0x1fce <__udivmod64+0x94>
    1f80:	1b 2e       	mov	r1, r27
    1f82:	bf 91       	pop	r27
    1f84:	bb 27       	eor	r27, r27
    1f86:	22 0f       	add	r18, r18
    1f88:	33 1f       	adc	r19, r19
    1f8a:	44 1f       	adc	r20, r20
    1f8c:	55 1f       	adc	r21, r21
    1f8e:	66 1f       	adc	r22, r22
    1f90:	77 1f       	adc	r23, r23
    1f92:	88 1f       	adc	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	88 1c       	adc	r8, r8
    1f98:	99 1c       	adc	r9, r9
    1f9a:	ee 1f       	adc	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	cc 1f       	adc	r28, r28
    1fa0:	dd 1f       	adc	r29, r29
    1fa2:	aa 1f       	adc	r26, r26
    1fa4:	bb 1f       	adc	r27, r27
    1fa6:	8a 14       	cp	r8, r10
    1fa8:	9b 04       	cpc	r9, r11
    1faa:	ec 05       	cpc	r30, r12
    1fac:	fd 05       	cpc	r31, r13
    1fae:	ce 05       	cpc	r28, r14
    1fb0:	df 05       	cpc	r29, r15
    1fb2:	a0 07       	cpc	r26, r16
    1fb4:	b1 07       	cpc	r27, r17
    1fb6:	48 f0       	brcs	.+18     	; 0x1fca <__udivmod64+0x90>
    1fb8:	8a 18       	sub	r8, r10
    1fba:	9b 08       	sbc	r9, r11
    1fbc:	ec 09       	sbc	r30, r12
    1fbe:	fd 09       	sbc	r31, r13
    1fc0:	ce 09       	sbc	r28, r14
    1fc2:	df 09       	sbc	r29, r15
    1fc4:	a0 0b       	sbc	r26, r16
    1fc6:	b1 0b       	sbc	r27, r17
    1fc8:	21 60       	ori	r18, 0x01	; 1
    1fca:	1a 94       	dec	r1
    1fcc:	e1 f6       	brne	.-72     	; 0x1f86 <__udivmod64+0x4c>
    1fce:	2e f4       	brtc	.+10     	; 0x1fda <__udivmod64+0xa0>
    1fd0:	94 01       	movw	r18, r8
    1fd2:	af 01       	movw	r20, r30
    1fd4:	be 01       	movw	r22, r28
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	00 0c       	add	r0, r0
    1fda:	08 95       	ret

00001fdc <__negdi2>:
    1fdc:	60 95       	com	r22
    1fde:	70 95       	com	r23
    1fe0:	80 95       	com	r24
    1fe2:	90 95       	com	r25
    1fe4:	30 95       	com	r19
    1fe6:	40 95       	com	r20
    1fe8:	50 95       	com	r21
    1fea:	21 95       	neg	r18
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	4f 4f       	sbci	r20, 0xFF	; 255
    1ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff2:	6f 4f       	sbci	r22, 0xFF	; 255
    1ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffa:	08 95       	ret

00001ffc <__prologue_saves__>:
    1ffc:	2f 92       	push	r2
    1ffe:	3f 92       	push	r3
    2000:	4f 92       	push	r4
    2002:	5f 92       	push	r5
    2004:	6f 92       	push	r6
    2006:	7f 92       	push	r7
    2008:	8f 92       	push	r8
    200a:	9f 92       	push	r9
    200c:	af 92       	push	r10
    200e:	bf 92       	push	r11
    2010:	cf 92       	push	r12
    2012:	df 92       	push	r13
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	ca 1b       	sub	r28, r26
    2026:	db 0b       	sbc	r29, r27
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	09 94       	ijmp

00002034 <__epilogue_restores__>:
    2034:	2a 88       	ldd	r2, Y+18	; 0x12
    2036:	39 88       	ldd	r3, Y+17	; 0x11
    2038:	48 88       	ldd	r4, Y+16	; 0x10
    203a:	5f 84       	ldd	r5, Y+15	; 0x0f
    203c:	6e 84       	ldd	r6, Y+14	; 0x0e
    203e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2040:	8c 84       	ldd	r8, Y+12	; 0x0c
    2042:	9b 84       	ldd	r9, Y+11	; 0x0b
    2044:	aa 84       	ldd	r10, Y+10	; 0x0a
    2046:	b9 84       	ldd	r11, Y+9	; 0x09
    2048:	c8 84       	ldd	r12, Y+8	; 0x08
    204a:	df 80       	ldd	r13, Y+7	; 0x07
    204c:	ee 80       	ldd	r14, Y+6	; 0x06
    204e:	fd 80       	ldd	r15, Y+5	; 0x05
    2050:	0c 81       	ldd	r16, Y+4	; 0x04
    2052:	1b 81       	ldd	r17, Y+3	; 0x03
    2054:	aa 81       	ldd	r26, Y+2	; 0x02
    2056:	b9 81       	ldd	r27, Y+1	; 0x01
    2058:	ce 0f       	add	r28, r30
    205a:	d1 1d       	adc	r29, r1
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	ed 01       	movw	r28, r26
    2068:	08 95       	ret

0000206a <__ashldi3>:
    206a:	0f 93       	push	r16
    206c:	08 30       	cpi	r16, 0x08	; 8
    206e:	90 f0       	brcs	.+36     	; 0x2094 <__ashldi3+0x2a>
    2070:	98 2f       	mov	r25, r24
    2072:	87 2f       	mov	r24, r23
    2074:	76 2f       	mov	r23, r22
    2076:	65 2f       	mov	r22, r21
    2078:	54 2f       	mov	r21, r20
    207a:	43 2f       	mov	r20, r19
    207c:	32 2f       	mov	r19, r18
    207e:	22 27       	eor	r18, r18
    2080:	08 50       	subi	r16, 0x08	; 8
    2082:	f4 cf       	rjmp	.-24     	; 0x206c <__ashldi3+0x2>
    2084:	22 0f       	add	r18, r18
    2086:	33 1f       	adc	r19, r19
    2088:	44 1f       	adc	r20, r20
    208a:	55 1f       	adc	r21, r21
    208c:	66 1f       	adc	r22, r22
    208e:	77 1f       	adc	r23, r23
    2090:	88 1f       	adc	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	0a 95       	dec	r16
    2096:	b2 f7       	brpl	.-20     	; 0x2084 <__ashldi3+0x1a>
    2098:	0f 91       	pop	r16
    209a:	08 95       	ret

0000209c <__adddi3>:
    209c:	2a 0d       	add	r18, r10
    209e:	3b 1d       	adc	r19, r11
    20a0:	4c 1d       	adc	r20, r12
    20a2:	5d 1d       	adc	r21, r13
    20a4:	6e 1d       	adc	r22, r14
    20a6:	7f 1d       	adc	r23, r15
    20a8:	80 1f       	adc	r24, r16
    20aa:	91 1f       	adc	r25, r17
    20ac:	08 95       	ret

000020ae <__cmpdi2_s8>:
    20ae:	00 24       	eor	r0, r0
    20b0:	a7 fd       	sbrc	r26, 7
    20b2:	00 94       	com	r0
    20b4:	2a 17       	cp	r18, r26
    20b6:	30 05       	cpc	r19, r0
    20b8:	40 05       	cpc	r20, r0
    20ba:	50 05       	cpc	r21, r0
    20bc:	60 05       	cpc	r22, r0
    20be:	70 05       	cpc	r23, r0
    20c0:	80 05       	cpc	r24, r0
    20c2:	90 05       	cpc	r25, r0
    20c4:	08 95       	ret

000020c6 <_exit>:
    20c6:	f8 94       	cli

000020c8 <__stop_program>:
    20c8:	ff cf       	rjmp	.-2      	; 0x20c8 <__stop_program>
